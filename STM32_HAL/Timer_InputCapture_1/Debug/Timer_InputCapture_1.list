
Timer_InputCapture_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004378  08004378  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004380  08004380  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  080043fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080043fc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9a0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  0002da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000afa4  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003cb2  00000000  00000000  0003bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0003f86e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003694  00000000  00000000  0003f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042e8 	.word	0x080042e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080042e8 	.word	0x080042e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <main>:
volatile uint8_t is_capture_done = FALSE;



int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a4      	sub	sp, #144	; 0x90
 8000d64:	af00      	add	r7, sp, #0
	uint32_t capture_difference =0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	double timer2_cnt_freq=0;
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double timer2_cnt_res=0;
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double user_signal_time_period =0;
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double user_signal_freq=0;
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	char usr_msg[100];
	HAL_Init();
 8000d9c:	f000 fb38 	bl	8001410 <HAL_Init>



	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000da0:	2032      	movs	r0, #50	; 0x32
 8000da2:	f000 f885 	bl	8000eb0 <SystemClockConfig>

	GPIO_Init();
 8000da6:	f000 f911 	bl	8000fcc <GPIO_Init>

	UART2_Init();
 8000daa:	f000 f94d 	bl	8001048 <UART2_Init>

	TIMER6_Init();
 8000dae:	f000 f931 	bl	8001014 <TIMER6_Init>

	TIMER2_Init();
 8000db2:	f000 f96f 	bl	8001094 <TIMER2_Init>

	LSE_Configuration();
 8000db6:	f000 f99f 	bl	80010f8 <LSE_Configuration>

    HAL_TIM_Base_Start_IT(&htimer6);
 8000dba:	4836      	ldr	r0, [pc, #216]	; (8000e94 <main+0x134>)
 8000dbc:	f001 fc84 	bl	80026c8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_IC_Start_IT(&htimer2,TIM_CHANNEL_1);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4835      	ldr	r0, [pc, #212]	; (8000e98 <main+0x138>)
 8000dc4:	f001 fd40 	bl	8002848 <HAL_TIM_IC_Start_IT>

	while(1)
	{
		if(is_capture_done)
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <main+0x13c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0fa      	beq.n	8000dc8 <main+0x68>
		{
			if(input_captures[1] > input_captures[0])
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x140>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <main+0x140>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d907      	bls.n	8000dee <main+0x8e>
				capture_difference = input_captures[1] - input_captures[0];
 8000dde:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <main+0x140>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <main+0x140>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000dec:	e007      	b.n	8000dfe <main+0x9e>
			else
				capture_difference = (0XFFFFFFFF -input_captures[0]) + input_captures[1];
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <main+0x140>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <main+0x140>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


		timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 ) / (htimer2.Init.Prescaler + 1);
 8000dfe:	f000 ffa3 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8000e02:	4603      	mov	r3, r0
 8000e04:	005a      	lsls	r2, r3, #1
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <main+0x138>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fb97 	bl	8000544 <__aeabi_ui2d>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		timer2_cnt_res = 1/ timer2_cnt_freq;
 8000e1e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	491f      	ldr	r1, [pc, #124]	; (8000ea4 <main+0x144>)
 8000e28:	f7ff fd30 	bl	800088c <__aeabi_ddiv>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		user_signal_time_period = capture_difference * timer2_cnt_res;
 8000e34:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e38:	f7ff fb84 	bl	8000544 <__aeabi_ui2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000e44:	f7ff fbf8 	bl	8000638 <__aeabi_dmul>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		user_signal_freq = 1/user_signal_time_period ;
 8000e50:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000e54:	f04f 0000 	mov.w	r0, #0
 8000e58:	4912      	ldr	r1, [pc, #72]	; (8000ea4 <main+0x144>)
 8000e5a:	f7ff fd17 	bl	800088c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		sprintf(usr_msg,"Frequency of the signal applied = %.2f Hz\r\n",user_signal_freq );
 8000e66:	1d38      	adds	r0, r7, #4
 8000e68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000e6c:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <main+0x148>)
 8000e6e:	f002 fdcd 	bl	8003a0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)usr_msg,strlen(usr_msg),HAL_MAX_DELAY);
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff f9cb 	bl	8000210 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	1d39      	adds	r1, r7, #4
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <main+0x14c>)
 8000e86:	f002 fa23 	bl	80032d0 <HAL_UART_Transmit>

		is_capture_done = FALSE;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <main+0x13c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		if(is_capture_done)
 8000e90:	e79a      	b.n	8000dc8 <main+0x68>
 8000e92:	bf00      	nop
 8000e94:	200000d8 	.word	0x200000d8
 8000e98:	20000090 	.word	0x20000090
 8000e9c:	2000016c 	.word	0x2000016c
 8000ea0:	20000164 	.word	0x20000164
 8000ea4:	3ff00000 	.word	0x3ff00000
 8000ea8:	08004300 	.word	0x08004300
 8000eac:	20000120 	.word	0x20000120

08000eb0 <SystemClockConfig>:
	return 0;
}


void SystemClockConfig(uint8_t clock_freq )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b096      	sub	sp, #88	; 0x58
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.LSEState = RCC_LSE_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.HSICalibrationValue = 16;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b78      	cmp	r3, #120	; 0x78
 8000ed6:	d032      	beq.n	8000f3e <SystemClockConfig+0x8e>
 8000ed8:	2b78      	cmp	r3, #120	; 0x78
 8000eda:	dc71      	bgt.n	8000fc0 <SystemClockConfig+0x110>
 8000edc:	2b32      	cmp	r3, #50	; 0x32
 8000ede:	d002      	beq.n	8000ee6 <SystemClockConfig+0x36>
 8000ee0:	2b54      	cmp	r3, #84	; 0x54
 8000ee2:	d016      	beq.n	8000f12 <SystemClockConfig+0x62>
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	     break;

	  default:
	   return ;
 8000ee4:	e06c      	b.n	8000fc0 <SystemClockConfig+0x110>
		  Osc_Init.PLL.PLLM = 8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 8000eea:	2332      	movs	r3, #50	; 0x32
 8000eec:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
	     break;
 8000f10:	e02c      	b.n	8000f6c <SystemClockConfig+0xbc>
		  Osc_Init.PLL.PLLM = 8;
 8000f12:	2308      	movs	r3, #8
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 8000f16:	2354      	movs	r3, #84	; 0x54
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
	     break;
 8000f3c:	e016      	b.n	8000f6c <SystemClockConfig+0xbc>
		  Osc_Init.PLL.PLLM = 8;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 8000f42:	2378      	movs	r3, #120	; 0x78
 8000f44:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2302      	movs	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f62:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	61fb      	str	r3, [r7, #28]
	     break;
 8000f6a:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f8bb 	bl	80020ec <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClockConfig+0xd0>
	{
			Error_handler();
 8000f7c:	f000 f8fa 	bl	8001174 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2102      	movs	r1, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fd84 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClockConfig+0xe6>
	{
		Error_handler();
 8000f92:	f000 f8ef 	bl	8001174 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000f96:	f000 fecb 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8000f9a:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SystemClockConfig+0x118>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	099b      	lsrs	r3, r3, #6
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fba9 	bl	80016fe <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fac:	2004      	movs	r0, #4
 8000fae:	f000 fbb3 	bl	8001718 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	f000 fb76 	bl	80016aa <HAL_NVIC_SetPriority>
 8000fbe:	e000      	b.n	8000fc2 <SystemClockConfig+0x112>
	   return ;
 8000fc0:	bf00      	nop

}
 8000fc2:	3758      	adds	r7, #88	; 0x58
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	10624dd3 	.word	0x10624dd3

08000fcc <GPIO_Init>:

void GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <GPIO_Init+0x40>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a0c      	ldr	r2, [pc, #48]	; (800100c <GPIO_Init+0x40>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <GPIO_Init+0x40>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <GPIO_Init+0x44>)
 8001000:	f000 fbb4 	bl	800176c <HAL_GPIO_Init>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000

08001014 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <TIMER6_Init+0x2c>)
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <TIMER6_Init+0x30>)
 800101c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 9;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <TIMER6_Init+0x2c>)
 8001020:	2209      	movs	r2, #9
 8001022:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 50-1;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <TIMER6_Init+0x2c>)
 8001026:	2231      	movs	r2, #49	; 0x31
 8001028:	60da      	str	r2, [r3, #12]
	if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <TIMER6_Init+0x2c>)
 800102c:	f001 fafc 	bl	8002628 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <TIMER6_Init+0x26>
	{
		Error_handler();
 8001036:	f000 f89d 	bl	8001174 <Error_handler>
	}

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000d8 	.word	0x200000d8
 8001044:	40001000 	.word	0x40001000

08001048 <UART2_Init>:

void UART2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <UART2_Init+0x44>)
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <UART2_Init+0x48>)
 8001050:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <UART2_Init+0x44>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <UART2_Init+0x44>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <UART2_Init+0x44>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <UART2_Init+0x44>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <UART2_Init+0x44>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <UART2_Init+0x44>)
 8001074:	220c      	movs	r2, #12
 8001076:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <UART2_Init+0x44>)
 800107a:	f002 f8dc 	bl	8003236 <HAL_UART_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8001084:	f000 f876 	bl	8001174 <Error_handler>
	}


}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000120 	.word	0x20000120
 8001090:	40004400 	.word	0x40004400

08001094 <TIMER2_Init>:


 void TIMER2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	 TIM_IC_InitTypeDef timer2IC_Config;

	 htimer2.Instance = TIM2;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <TIMER2_Init+0x60>)
 800109c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a0:	601a      	str	r2, [r3, #0]
	 htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <TIMER2_Init+0x60>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
	 htimer2.Init.Period = 0xFFFFFFFF;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <TIMER2_Init+0x60>)
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
 80010ae:	60da      	str	r2, [r3, #12]
	 htimer2.Init.Prescaler = 1;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <TIMER2_Init+0x60>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	605a      	str	r2, [r3, #4]
	 if ( HAL_TIM_IC_Init(&htimer2) != HAL_OK)
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <TIMER2_Init+0x60>)
 80010b8:	f001 fb76 	bl	80027a8 <HAL_TIM_IC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <TIMER2_Init+0x32>
	 {
		 Error_handler();
 80010c2:	f000 f857 	bl	8001174 <Error_handler>
	 }

	 timer2IC_Config.ICFilter = 0 ;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	 timer2IC_Config.ICPolarity = TIM_ICPOLARITY_RISING;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
	 timer2IC_Config.ICPrescaler = TIM_ICPSC_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
	 timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010d2:	2301      	movs	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
	 if ( HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <TIMER2_Init+0x60>)
 80010de:	f001 fde3 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <TIMER2_Init+0x58>
	 {
		 Error_handler();
 80010e8:	f000 f844 	bl	8001174 <Error_handler>
	 }



}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000090 	.word	0x20000090

080010f8 <LSE_Configuration>:

void LSE_Configuration(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	{
		Error_handler();
	}
#endif

	HAL_RCC_MCOConfig(RCC_MCO1,RCC_MCO1SOURCE_HSI,RCC_MCODIV_4);
 80010fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001100:	2100      	movs	r1, #0
 8001102:	2000      	movs	r0, #0
 8001104:	f000 fdac 	bl	8001c60 <HAL_RCC_MCOConfig>

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_TIM_IC_CaptureCallback>:


 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
#if 1
 if(! is_capture_done)
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d11e      	bne.n	800115c <HAL_TIM_IC_CaptureCallback+0x50>
 {
	 if(count == 1)
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10b      	bne.n	800113e <HAL_TIM_IC_CaptureCallback+0x32>
	 {
		 input_captures[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_TIM_IC_CaptureCallback+0x64>)
 800112e:	6013      	str	r3, [r2, #0]
		 count++;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_TIM_IC_CaptureCallback+0x60>)
 800113a:	701a      	strb	r2, [r3, #0]
	 }

 }
#endif

}
 800113c:	e00e      	b.n	800115c <HAL_TIM_IC_CaptureCallback+0x50>
	 else if (count == 2)
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d10a      	bne.n	800115c <HAL_TIM_IC_CaptureCallback+0x50>
		 input_captures[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_TIM_IC_CaptureCallback+0x64>)
 800114e:	6053      	str	r3, [r2, #4]
		 count =1;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_TIM_IC_CaptureCallback+0x60>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
		 is_capture_done = TRUE;
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	2000016c 	.word	0x2000016c
 800116c:	20000000 	.word	0x20000000
 8001170:	20000164 	.word	0x20000164

08001174 <Error_handler>:

void Error_handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	while(1);
 8001178:	e7fe      	b.n	8001178 <Error_handler+0x4>
	...

0800117c <HAL_MspInit>:
#include"stm32f4xx_hal.h"

#include "main.h"

void HAL_MspInit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fa87 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <HAL_MspInit+0x40>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_MspInit+0x40>)
 800118c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001190:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	f06f 000b 	mvn.w	r0, #11
 800119a:	f000 fa86 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	f06f 000a 	mvn.w	r0, #10
 80011a6:	f000 fa80 	bl	80016aa <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	f06f 0009 	mvn.w	r0, #9
 80011b2:	f000 fa7a 	bl	80016aa <HAL_NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <HAL_TIM_IC_MspInit>:

 void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2ch1_gpio;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_TIM_IC_MspInit+0x70>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

	 //2. Configure a gpio to behave as timer2 channel 1
	 tim2ch1_gpio.Pin = GPIO_PIN_0;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
	 tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
	 tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 8001208:	2301      	movs	r3, #1
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&tim2ch1_gpio);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <HAL_TIM_IC_MspInit+0x74>)
 8001214:	f000 faaa 	bl	800176c <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8001218:	2200      	movs	r2, #0
 800121a:	210f      	movs	r1, #15
 800121c:	201c      	movs	r0, #28
 800121e:	f000 fa44 	bl	80016aa <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001222:	201c      	movs	r0, #28
 8001224:	f000 fa5d 	bl	80016e2 <HAL_NVIC_EnableIRQ>


}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_TIM_Base_MspInit>:

 void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
 {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

 	//1. enable the clock for the TIM6 peripheral
 	__HAL_RCC_TIM6_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]

 	//2. Enable the IRQ of TIM6
 	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800125c:	2036      	movs	r0, #54	; 0x36
 800125e:	f000 fa40 	bl	80016e2 <HAL_NVIC_EnableIRQ>

 	//3. setup the priority for TIM6_DAC_IRQn
 	HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	2036      	movs	r0, #54	; 0x36
 8001268:	f000 fa1f 	bl	80016aa <HAL_NVIC_SetPriority>

 }
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_UART_MspInit+0x88>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_UART_MspInit+0x88>)
 800128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_UART_MspInit+0x88>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_UART_MspInit+0x88>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a16      	ldr	r2, [pc, #88]	; (8001300 <HAL_UART_MspInit+0x88>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_UART_MspInit+0x88>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80012b8:	2304      	movs	r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80012c8:	2307      	movs	r3, #7
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012d4:	f000 fa4a 	bl	800176c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80012d8:	2308      	movs	r3, #8
 80012da:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <HAL_UART_MspInit+0x8c>)
 80012e4:	f000 fa42 	bl	800176c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012e8:	2026      	movs	r0, #38	; 0x26
 80012ea:	f000 f9fa 	bl	80016e2 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	2026      	movs	r0, #38	; 0x26
 80012f4:	f000 f9d9 	bl	80016aa <HAL_NVIC_SetPriority>

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <SysTick_Handler>:
#include"stm32f4xx.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800130c:	f000 f8d2 	bl	80014b4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001310:	f000 fa1e 	bl	8001750 <HAL_SYSTICK_IRQHandler>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM6_DAC_IRQHandler+0x10>)
 800131e:	f001 fbbb 	bl	8002a98 <HAL_TIM_IRQHandler>

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000090 	.word	0x20000090

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f002 fb2c 	bl	80039b8 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000170 	.word	0x20000170
 8001394:	20000188 	.word	0x20000188

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffd7 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f002 faeb 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fcb7 	bl	8000d60 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001400:	08004388 	.word	0x08004388
  ldr r2, =_sbss
 8001404:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001408:	20000188 	.word	0x20000188

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f92b 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe9a 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f943 	bl	80016fe <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f90b 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000004 	.word	0x20000004
 80014ac:	2000000c 	.word	0x2000000c
 80014b0:	20000008 	.word	0x20000008

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	20000174 	.word	0x20000174

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000174 	.word	0x20000174

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b04      	cmp	r3, #4
 8001724:	d106      	bne.n	8001734 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001732:	e005      	b.n	8001740 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001754:	f000 f802 	bl	800175c <HAL_SYSTICK_Callback>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e165      	b.n	8001a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8154 	bne.w	8001a4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80ae 	beq.w	8001a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_GPIO_Init+0x304>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_GPIO_Init+0x308>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_GPIO_Init+0x30c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x216>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_GPIO_Init+0x310>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x212>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x314>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x20e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_GPIO_Init+0x318>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x20a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x31c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x206>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x320>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x202>
 800196a:	2306      	movs	r3, #6
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800196e:	2307      	movs	r3, #7
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x21c>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x304>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_GPIO_Init+0x324>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_GPIO_Init+0x324>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f ae96 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021800 	.word	0x40021800
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cc      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d044      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e067      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fcaa 	bl	80014dc <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fca6 	bl	80014dc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f8bd 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fc0a 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	0800432c 	.word	0x0800432c
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d129      	bne.n	8001cc6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481f      	ldr	r0, [pc, #124]	; (8001d28 <HAL_RCC_MCOConfig+0xc8>)
 8001cac:	f7ff fd5e 	bl	800176c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	4919      	ldr	r1, [pc, #100]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001cc4:	e029      	b.n	8001d1a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_RCC_MCOConfig+0xcc>)
 8001d00:	f7ff fd34 	bl	800176c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	00d9      	lsls	r1, r3, #3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	430b      	orrs	r3, r1
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_MCOConfig+0xc4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	; 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020800 	.word	0x40020800

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0a9b      	lsrs	r3, r3, #10
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	0800433c 	.word	0x0800433c

08001d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d74:	f7ff ffdc 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0b5b      	lsrs	r3, r3, #13
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4903      	ldr	r1, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	0800433c 	.word	0x0800433c

08001d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d9c:	b0a6      	sub	sp, #152	; 0x98
 8001d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dbe:	4bc8      	ldr	r3, [pc, #800]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	f200 817e 	bhi.w	80020c8 <HAL_RCC_GetSysClockFreq+0x330>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001e09 	.word	0x08001e09
 8001dd8:	080020c9 	.word	0x080020c9
 8001ddc:	080020c9 	.word	0x080020c9
 8001de0:	080020c9 	.word	0x080020c9
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	080020c9 	.word	0x080020c9
 8001dec:	080020c9 	.word	0x080020c9
 8001df0:	080020c9 	.word	0x080020c9
 8001df4:	08001e19 	.word	0x08001e19
 8001df8:	080020c9 	.word	0x080020c9
 8001dfc:	080020c9 	.word	0x080020c9
 8001e00:	080020c9 	.word	0x080020c9
 8001e04:	08001f83 	.word	0x08001f83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4bb6      	ldr	r3, [pc, #728]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001e0e:	e15f      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4bb5      	ldr	r3, [pc, #724]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e16:	e15b      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4bb1      	ldr	r3, [pc, #708]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e24:	4bae      	ldr	r3, [pc, #696]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d031      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e30:	4bab      	ldr	r3, [pc, #684]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	2200      	movs	r2, #0
 8001e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e42:	663b      	str	r3, [r7, #96]	; 0x60
 8001e44:	2300      	movs	r3, #0
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
 8001e48:	4ba7      	ldr	r3, [pc, #668]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e4e:	462a      	mov	r2, r5
 8001e50:	fb03 f202 	mul.w	r2, r3, r2
 8001e54:	2300      	movs	r3, #0
 8001e56:	4621      	mov	r1, r4
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4aa2      	ldr	r2, [pc, #648]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001e60:	4621      	mov	r1, r4
 8001e62:	fba1 1202 	umull	r1, r2, r1, r2
 8001e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e68:	460a      	mov	r2, r1
 8001e6a:	67ba      	str	r2, [r7, #120]	; 0x78
 8001e6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e6e:	4413      	add	r3, r2
 8001e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e76:	2200      	movs	r2, #0
 8001e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e84:	f7fe fdea 	bl	8000a5c <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e92:	e064      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e9e:	657a      	str	r2, [r7, #84]	; 0x54
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001eb0:	4622      	mov	r2, r4
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	f04f 0000 	mov.w	r0, #0
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	0159      	lsls	r1, r3, #5
 8001ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec2:	0150      	lsls	r0, r2, #5
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4621      	mov	r1, r4
 8001eca:	1a51      	subs	r1, r2, r1
 8001ecc:	6139      	str	r1, [r7, #16]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee2:	4659      	mov	r1, fp
 8001ee4:	018b      	lsls	r3, r1, #6
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eec:	4651      	mov	r1, sl
 8001eee:	018a      	lsls	r2, r1, #6
 8001ef0:	4651      	mov	r1, sl
 8001ef2:	ebb2 0801 	subs.w	r8, r2, r1
 8001ef6:	4659      	mov	r1, fp
 8001ef8:	eb63 0901 	sbc.w	r9, r3, r1
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f10:	4690      	mov	r8, r2
 8001f12:	4699      	mov	r9, r3
 8001f14:	4623      	mov	r3, r4
 8001f16:	eb18 0303 	adds.w	r3, r8, r3
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	462b      	mov	r3, r5
 8001f1e:	eb49 0303 	adc.w	r3, r9, r3
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f30:	4629      	mov	r1, r5
 8001f32:	028b      	lsls	r3, r1, #10
 8001f34:	4621      	mov	r1, r4
 8001f36:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	028a      	lsls	r2, r1, #10
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f46:	2200      	movs	r2, #0
 8001f48:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4a:	647a      	str	r2, [r7, #68]	; 0x44
 8001f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f50:	f7fe fd84 	bl	8000a5c <__aeabi_uldivmod>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4613      	mov	r3, r2
 8001f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001f70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f80:	e0a6      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f82:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d02a      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b51      	ldr	r3, [pc, #324]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fac:	2100      	movs	r1, #0
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fb0:	fb03 f201 	mul.w	r2, r3, r1
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	fb00 f303 	mul.w	r3, r0, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a4a      	ldr	r2, [pc, #296]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001fc2:	677a      	str	r2, [r7, #116]	; 0x74
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	673a      	str	r2, [r7, #112]	; 0x70
 8001fc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fca:	4413      	add	r3, r2
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74
 8001fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd6:	637a      	str	r2, [r7, #52]	; 0x34
 8001fd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001fe0:	f7fe fd3c 	bl	8000a5c <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fee:	e05b      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	f04f 0000 	mov.w	r0, #0
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	0159      	lsls	r1, r3, #5
 800201a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201e:	0150      	lsls	r0, r2, #5
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4641      	mov	r1, r8
 8002026:	ebb2 0a01 	subs.w	sl, r2, r1
 800202a:	4649      	mov	r1, r9
 800202c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800203c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002044:	ebb2 040a 	subs.w	r4, r2, sl
 8002048:	eb63 050b 	sbc.w	r5, r3, fp
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	00eb      	lsls	r3, r5, #3
 8002056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205a:	00e2      	lsls	r2, r4, #3
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4643      	mov	r3, r8
 8002062:	18e3      	adds	r3, r4, r3
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	464b      	mov	r3, r9
 8002068:	eb45 0303 	adc.w	r3, r5, r3
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207a:	4629      	mov	r1, r5
 800207c:	028b      	lsls	r3, r1, #10
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002084:	4621      	mov	r1, r4
 8002086:	028a      	lsls	r2, r1, #10
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002090:	2200      	movs	r2, #0
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	61fa      	str	r2, [r7, #28]
 8002096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800209a:	f7fe fcdf 	bl	8000a5c <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4613      	mov	r3, r2
 80020a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0f1b      	lsrs	r3, r3, #28
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80020b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020c6:	e003      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80020ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3798      	adds	r7, #152	; 0x98
 80020d8:	46bd      	mov	sp, r7
 80020da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	017d7840 	.word	0x017d7840

080020ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e28d      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8083 	beq.w	8002212 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800210c:	4b94      	ldr	r3, [pc, #592]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d019      	beq.n	800214c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002118:	4b91      	ldr	r3, [pc, #580]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002120:	2b08      	cmp	r3, #8
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002124:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b84      	ldr	r3, [pc, #528]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x124>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e25a      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x90>
 800216e:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7b      	ldr	r2, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xcc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xb4>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a72      	ldr	r2, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xcc>
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6b      	ldr	r2, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff f98c 	bl	80014dc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff f988 	bl	80014dc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e21f      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xdc>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f978 	bl	80014dc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff f974 	bl	80014dc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e20b      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b57      	ldr	r3, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x104>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06f      	beq.n	80022fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221e:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d017      	beq.n	800225a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x186>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1d3      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x278>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f921 	bl	80014dc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff f91d 	bl	80014dc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1b4      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x278>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff f900 	bl	80014dc <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff f8fc 	bl	80014dc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e193      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x27c>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff f8e0 	bl	80014dc <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff f8dc 	bl	80014dc <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e173      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x234>
 800233e:	e01b      	b.n	8002378 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x27c>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff f8c9 	bl	80014dc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	e00e      	b.n	800236c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234e:	f7ff f8c5 	bl	80014dc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d907      	bls.n	800236c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e15c      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
 8002360:	40023800 	.word	0x40023800
 8002364:	42470000 	.word	0x42470000
 8002368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b8a      	ldr	r3, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ea      	bne.n	800234e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8097 	beq.w	80024b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a7e      	ldr	r2, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff f885 	bl	80014dc <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff f881 	bl	80014dc <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e118      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x31e>
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x358>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x340>
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x358>
 800242c:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a59      	ldr	r2, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff f846 	bl	80014dc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f842 	bl	80014dc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0d7      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RCC_OscConfig+0x368>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff f830 	bl	80014dc <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7ff f82c 	bl	80014dc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0c1      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80ad 	beq.w	8002618 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d060      	beq.n	800258c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d145      	bne.n	800255e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff f800 	bl	80014dc <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fffc 	bl	80014dc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e093      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	491b      	ldr	r1, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe ffd1 	bl	80014dc <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe ffcd 	bl	80014dc <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e064      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x452>
 800255c:	e05c      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe ffba 	bl	80014dc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe ffb6 	bl	80014dc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04d      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x480>
 800258a:	e045      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e040      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
 80025a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_OscConfig+0x538>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d030      	beq.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d122      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025dc:	4293      	cmp	r3, r2
 80025de:	d119      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e041      	b.n	80026be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fdf2 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fbe2 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d001      	beq.n	80026e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04e      	b.n	800277e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_TIM_Base_Start_IT+0xc4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d01d      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_TIM_Base_Start_IT+0xc8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_TIM_Base_Start_IT+0xcc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_TIM_Base_Start_IT+0xd0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00e      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_TIM_Base_Start_IT+0xd4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a19      	ldr	r2, [pc, #100]	; (80027a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x80>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d010      	beq.n	800277c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276a:	e007      	b.n	800277c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40010000 	.word	0x40010000
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00
 800279c:	40010400 	.word	0x40010400
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40001800 	.word	0x40001800

080027a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fcf6 	bl	80011c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fb22 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <HAL_TIM_IC_Start_IT+0x1e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002862:	b2db      	uxtb	r3, r3
 8002864:	e013      	b.n	800288e <HAL_TIM_IC_Start_IT+0x46>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d104      	bne.n	8002876 <HAL_TIM_IC_Start_IT+0x2e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e00b      	b.n	800288e <HAL_TIM_IC_Start_IT+0x46>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d104      	bne.n	8002886 <HAL_TIM_IC_Start_IT+0x3e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e003      	b.n	800288e <HAL_TIM_IC_Start_IT+0x46>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d104      	bne.n	80028a0 <HAL_TIM_IC_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e013      	b.n	80028c8 <HAL_TIM_IC_Start_IT+0x80>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d104      	bne.n	80028b0 <HAL_TIM_IC_Start_IT+0x68>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e00b      	b.n	80028c8 <HAL_TIM_IC_Start_IT+0x80>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d104      	bne.n	80028c0 <HAL_TIM_IC_Start_IT+0x78>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e003      	b.n	80028c8 <HAL_TIM_IC_Start_IT+0x80>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d102      	bne.n	80028d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80028d0:	7b7b      	ldrb	r3, [r7, #13]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d001      	beq.n	80028da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0cc      	b.n	8002a74 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d104      	bne.n	80028ea <HAL_TIM_IC_Start_IT+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e8:	e013      	b.n	8002912 <HAL_TIM_IC_Start_IT+0xca>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d104      	bne.n	80028fa <HAL_TIM_IC_Start_IT+0xb2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f8:	e00b      	b.n	8002912 <HAL_TIM_IC_Start_IT+0xca>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d104      	bne.n	800290a <HAL_TIM_IC_Start_IT+0xc2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	e003      	b.n	8002912 <HAL_TIM_IC_Start_IT+0xca>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <HAL_TIM_IC_Start_IT+0xda>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002920:	e013      	b.n	800294a <HAL_TIM_IC_Start_IT+0x102>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d104      	bne.n	8002932 <HAL_TIM_IC_Start_IT+0xea>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002930:	e00b      	b.n	800294a <HAL_TIM_IC_Start_IT+0x102>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d104      	bne.n	8002942 <HAL_TIM_IC_Start_IT+0xfa>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	e003      	b.n	800294a <HAL_TIM_IC_Start_IT+0x102>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d841      	bhi.n	80029d4 <HAL_TIM_IC_Start_IT+0x18c>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HAL_TIM_IC_Start_IT+0x110>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	0800298d 	.word	0x0800298d
 800295c:	080029d5 	.word	0x080029d5
 8002960:	080029d5 	.word	0x080029d5
 8002964:	080029d5 	.word	0x080029d5
 8002968:	0800299f 	.word	0x0800299f
 800296c:	080029d5 	.word	0x080029d5
 8002970:	080029d5 	.word	0x080029d5
 8002974:	080029d5 	.word	0x080029d5
 8002978:	080029b1 	.word	0x080029b1
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029d5 	.word	0x080029d5
 8002984:	080029d5 	.word	0x080029d5
 8002988:	080029c3 	.word	0x080029c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0202 	orr.w	r2, r2, #2
 800299a:	60da      	str	r2, [r3, #12]
      break;
 800299c:	e01d      	b.n	80029da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0204 	orr.w	r2, r2, #4
 80029ac:	60da      	str	r2, [r3, #12]
      break;
 80029ae:	e014      	b.n	80029da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0208 	orr.w	r2, r2, #8
 80029be:	60da      	str	r2, [r3, #12]
      break;
 80029c0:	e00b      	b.n	80029da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0210 	orr.w	r2, r2, #16
 80029d0:	60da      	str	r2, [r3, #12]
      break;
 80029d2:	e002      	b.n	80029da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d148      	bne.n	8002a72 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	6839      	ldr	r1, [r7, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fbeb 	bl	80031c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_TIM_IC_Start_IT+0x234>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d01d      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_TIM_IC_Start_IT+0x238>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_TIM_IC_Start_IT+0x23c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIM_IC_Start_IT+0x240>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_TIM_IC_Start_IT+0x244>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_IC_Start_IT+0x248>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_TIM_IC_Start_IT+0x24c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d010      	beq.n	8002a72 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	e007      	b.n	8002a72 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40014000 	.word	0x40014000
 8002a94:	40001800 	.word	0x40001800

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fb16 	bl	800110c <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f986 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f98d 	bl	8002e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe faec 	bl	800110c <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f95c 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f963 	bl	8002e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe fac2 	bl	800110c <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f932 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f939 	bl	8002e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fa98 	bl	800110c <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f908 	bl	8002df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f90f 	bl	8002e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8e2 	bl	8002de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 faed 	bl	8003222 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8d4 	bl	8002e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0220 	mvn.w	r2, #32
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fab7 	bl	800320e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e088      	b.n	8002dd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11b      	bne.n	8002d0c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f000 f944 	bl	8002f70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020c 	bic.w	r2, r2, #12
 8002cf6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6999      	ldr	r1, [r3, #24]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]
 8002d0a:	e060      	b.n	8002dce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d11c      	bne.n	8002d4c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6819      	ldr	r1, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f000 f999 	bl	8003058 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6999      	ldr	r1, [r3, #24]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	021a      	lsls	r2, r3, #8
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e040      	b.n	8002dce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f000 f9b6 	bl	80030d2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020c 	bic.w	r2, r2, #12
 8002d74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
 8002d88:	e021      	b.n	8002dce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d11c      	bne.n	8002dca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f000 f9d3 	bl	800314a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002db2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69d9      	ldr	r1, [r3, #28]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	61da      	str	r2, [r3, #28]
 8002dc8:	e001      	b.n	8002dce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d00f      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3d      	ldr	r2, [pc, #244]	; (8002f48 <TIM_Base_SetConfig+0x118>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <TIM_Base_SetConfig+0x11c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3b      	ldr	r2, [pc, #236]	; (8002f50 <TIM_Base_SetConfig+0x120>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3a      	ldr	r2, [pc, #232]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2f      	ldr	r2, [pc, #188]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d027      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <TIM_Base_SetConfig+0x118>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d023      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <TIM_Base_SetConfig+0x11c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <TIM_Base_SetConfig+0x120>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d017      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a28      	ldr	r2, [pc, #160]	; (8002f58 <TIM_Base_SetConfig+0x128>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <TIM_Base_SetConfig+0x12c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00f      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <TIM_Base_SetConfig+0x130>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <TIM_Base_SetConfig+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <TIM_Base_SetConfig+0x138>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d003      	beq.n	8002ee2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <TIM_Base_SetConfig+0x13c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d108      	bne.n	8002ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <TIM_Base_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <TIM_Base_SetConfig+0xf8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <TIM_Base_SetConfig+0x124>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d103      	bne.n	8002f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	615a      	str	r2, [r3, #20]
}
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40000400 	.word	0x40000400
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	40010400 	.word	0x40010400
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	40001800 	.word	0x40001800
 8002f68:	40001c00 	.word	0x40001c00
 8002f6c:	40002000 	.word	0x40002000

08002f70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a28      	ldr	r2, [pc, #160]	; (800303c <TIM_TI1_SetConfig+0xcc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01b      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d017      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a25      	ldr	r2, [pc, #148]	; (8003040 <TIM_TI1_SetConfig+0xd0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <TIM_TI1_SetConfig+0xd4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <TIM_TI1_SetConfig+0xd8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <TIM_TI1_SetConfig+0xdc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a21      	ldr	r2, [pc, #132]	; (8003050 <TIM_TI1_SetConfig+0xe0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_TI1_SetConfig+0x66>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	; (8003054 <TIM_TI1_SetConfig+0xe4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <TIM_TI1_SetConfig+0x6a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <TIM_TI1_SetConfig+0x6c>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e003      	b.n	8002ffa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	b2db      	uxtb	r3, r3
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f023 030a 	bic.w	r3, r3, #10
 8003014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 030a 	and.w	r3, r3, #10
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400
 8003050:	40014000 	.word	0x40014000
 8003054:	40001800 	.word	0x40001800

08003058 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f023 0210 	bic.w	r2, r3, #16
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	b29b      	uxth	r3, r3
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	b2db      	uxtb	r3, r3
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003188:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	031b      	lsls	r3, r3, #12
 800318e:	b29b      	uxth	r3, r3
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800319c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2201      	movs	r2, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e03f      	b.n	80032c8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fe f80b 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003278:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f928 	bl	80034d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d17c      	bne.n	80033ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_UART_Transmit+0x2c>
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e075      	b.n	80033ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_UART_Transmit+0x3e>
 800330a:	2302      	movs	r3, #2
 800330c:	e06e      	b.n	80033ec <HAL_UART_Transmit+0x11c>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2221      	movs	r2, #33	; 0x21
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003324:	f7fe f8da 	bl	80014dc <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d108      	bne.n	8003352 <HAL_UART_Transmit+0x82>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	e003      	b.n	800335a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003362:	e02a      	b.n	80033ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f840 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e036      	b.n	80033ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003392:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3302      	adds	r3, #2
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e007      	b.n	80033ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1cf      	bne.n	8003364 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f810 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e006      	b.n	80033ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b090      	sub	sp, #64	; 0x40
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e050      	b.n	80034a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d04c      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800340e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
 8003414:	f7fe f862 	bl	80014dc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003420:	429a      	cmp	r2, r3
 8003422:	d241      	bcs.n	80034a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	330c      	adds	r3, #12
 8003442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003444:	637a      	str	r2, [r7, #52]	; 0x34
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800344a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	613b      	str	r3, [r7, #16]
   return(result);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3314      	adds	r3, #20
 8003476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003478:	623a      	str	r2, [r7, #32]
 800347a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	69f9      	ldr	r1, [r7, #28]
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	61bb      	str	r3, [r7, #24]
   return(result);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e00f      	b.n	80034c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d09f      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3740      	adds	r7, #64	; 0x40
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b0c0      	sub	sp, #256	; 0x100
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	68d9      	ldr	r1, [r3, #12]
 80034ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	ea40 0301 	orr.w	r3, r0, r1
 80034f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	431a      	orrs	r2, r3
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	431a      	orrs	r2, r3
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003528:	f021 010c 	bic.w	r1, r1, #12
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003536:	430b      	orrs	r3, r1
 8003538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	6999      	ldr	r1, [r3, #24]
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	ea40 0301 	orr.w	r3, r0, r1
 8003556:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b8f      	ldr	r3, [pc, #572]	; (800379c <UART_SetConfig+0x2cc>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d005      	beq.n	8003570 <UART_SetConfig+0xa0>
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b8d      	ldr	r3, [pc, #564]	; (80037a0 <UART_SetConfig+0x2d0>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d104      	bne.n	800357a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7fe fbfe 	bl	8001d70 <HAL_RCC_GetPCLK2Freq>
 8003574:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003578:	e003      	b.n	8003582 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800357a:	f7fe fbe5 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 800357e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	f040 810c 	bne.w	80037a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003594:	2200      	movs	r2, #0
 8003596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800359a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800359e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035a2:	4622      	mov	r2, r4
 80035a4:	462b      	mov	r3, r5
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035aa:	415b      	adcs	r3, r3
 80035ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035b2:	4621      	mov	r1, r4
 80035b4:	eb12 0801 	adds.w	r8, r2, r1
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb43 0901 	adc.w	r9, r3, r1
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d2:	4690      	mov	r8, r2
 80035d4:	4699      	mov	r9, r3
 80035d6:	4623      	mov	r3, r4
 80035d8:	eb18 0303 	adds.w	r3, r8, r3
 80035dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035e0:	462b      	mov	r3, r5
 80035e2:	eb49 0303 	adc.w	r3, r9, r3
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035fe:	460b      	mov	r3, r1
 8003600:	18db      	adds	r3, r3, r3
 8003602:	653b      	str	r3, [r7, #80]	; 0x50
 8003604:	4613      	mov	r3, r2
 8003606:	eb42 0303 	adc.w	r3, r2, r3
 800360a:	657b      	str	r3, [r7, #84]	; 0x54
 800360c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003610:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003614:	f7fd fa22 	bl	8000a5c <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <UART_SetConfig+0x2d4>)
 800361e:	fba3 2302 	umull	r2, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	011c      	lsls	r4, r3, #4
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003630:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003634:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003640:	415b      	adcs	r3, r3
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003648:	4641      	mov	r1, r8
 800364a:	eb12 0a01 	adds.w	sl, r2, r1
 800364e:	4649      	mov	r1, r9
 8003650:	eb43 0b01 	adc.w	fp, r3, r1
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003660:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003668:	4692      	mov	sl, r2
 800366a:	469b      	mov	fp, r3
 800366c:	4643      	mov	r3, r8
 800366e:	eb1a 0303 	adds.w	r3, sl, r3
 8003672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003676:	464b      	mov	r3, r9
 8003678:	eb4b 0303 	adc.w	r3, fp, r3
 800367c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800368c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003690:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003694:	460b      	mov	r3, r1
 8003696:	18db      	adds	r3, r3, r3
 8003698:	643b      	str	r3, [r7, #64]	; 0x40
 800369a:	4613      	mov	r3, r2
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
 80036a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036aa:	f7fd f9d7 	bl	8000a5c <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <UART_SetConfig+0x2d4>)
 80036b6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2264      	movs	r2, #100	; 0x64
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	1acb      	subs	r3, r1, r3
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ca:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <UART_SetConfig+0x2d4>)
 80036cc:	fba3 2302 	umull	r2, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036d8:	441c      	add	r4, r3
 80036da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	1891      	adds	r1, r2, r2
 80036f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80036f4:	415b      	adcs	r3, r3
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036fc:	4641      	mov	r1, r8
 80036fe:	1851      	adds	r1, r2, r1
 8003700:	6339      	str	r1, [r7, #48]	; 0x30
 8003702:	4649      	mov	r1, r9
 8003704:	414b      	adcs	r3, r1
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003714:	4659      	mov	r1, fp
 8003716:	00cb      	lsls	r3, r1, #3
 8003718:	4651      	mov	r1, sl
 800371a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371e:	4651      	mov	r1, sl
 8003720:	00ca      	lsls	r2, r1, #3
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	4603      	mov	r3, r0
 8003728:	4642      	mov	r2, r8
 800372a:	189b      	adds	r3, r3, r2
 800372c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003730:	464b      	mov	r3, r9
 8003732:	460a      	mov	r2, r1
 8003734:	eb42 0303 	adc.w	r3, r2, r3
 8003738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003748:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800374c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003750:	460b      	mov	r3, r1
 8003752:	18db      	adds	r3, r3, r3
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
 8003756:	4613      	mov	r3, r2
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003762:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003766:	f7fd f979 	bl	8000a5c <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <UART_SetConfig+0x2d4>)
 8003770:	fba3 1302 	umull	r1, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2164      	movs	r1, #100	; 0x64
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <UART_SetConfig+0x2d4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 0207 	and.w	r2, r3, #7
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4422      	add	r2, r4
 8003796:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003798:	e105      	b.n	80039a6 <UART_SetConfig+0x4d6>
 800379a:	bf00      	nop
 800379c:	40011000 	.word	0x40011000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037ba:	4642      	mov	r2, r8
 80037bc:	464b      	mov	r3, r9
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	6239      	str	r1, [r7, #32]
 80037c2:	415b      	adcs	r3, r3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
 80037c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ca:	4641      	mov	r1, r8
 80037cc:	1854      	adds	r4, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0501 	adc.w	r5, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	00eb      	lsls	r3, r5, #3
 80037de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e2:	00e2      	lsls	r2, r4, #3
 80037e4:	4614      	mov	r4, r2
 80037e6:	461d      	mov	r5, r3
 80037e8:	4643      	mov	r3, r8
 80037ea:	18e3      	adds	r3, r4, r3
 80037ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037f0:	464b      	mov	r3, r9
 80037f2:	eb45 0303 	adc.w	r3, r5, r3
 80037f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003816:	4629      	mov	r1, r5
 8003818:	008b      	lsls	r3, r1, #2
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003820:	4621      	mov	r1, r4
 8003822:	008a      	lsls	r2, r1, #2
 8003824:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003828:	f7fd f918 	bl	8000a5c <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <UART_SetConfig+0x4e4>)
 8003832:	fba3 2302 	umull	r2, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	011c      	lsls	r4, r3, #4
 800383a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003844:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003848:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	1891      	adds	r1, r2, r2
 8003852:	61b9      	str	r1, [r7, #24]
 8003854:	415b      	adcs	r3, r3
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385c:	4641      	mov	r1, r8
 800385e:	1851      	adds	r1, r2, r1
 8003860:	6139      	str	r1, [r7, #16]
 8003862:	4649      	mov	r1, r9
 8003864:	414b      	adcs	r3, r1
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003874:	4659      	mov	r1, fp
 8003876:	00cb      	lsls	r3, r1, #3
 8003878:	4651      	mov	r1, sl
 800387a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387e:	4651      	mov	r1, sl
 8003880:	00ca      	lsls	r2, r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	4603      	mov	r3, r0
 8003888:	4642      	mov	r2, r8
 800388a:	189b      	adds	r3, r3, r2
 800388c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003890:	464b      	mov	r3, r9
 8003892:	460a      	mov	r2, r1
 8003894:	eb42 0303 	adc.w	r3, r2, r3
 8003898:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038b4:	4649      	mov	r1, r9
 80038b6:	008b      	lsls	r3, r1, #2
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038be:	4641      	mov	r1, r8
 80038c0:	008a      	lsls	r2, r1, #2
 80038c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038c6:	f7fd f8c9 	bl	8000a5c <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <UART_SetConfig+0x4e4>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <UART_SetConfig+0x4e4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ee:	441c      	add	r4, r3
 80038f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f4:	2200      	movs	r2, #0
 80038f6:	673b      	str	r3, [r7, #112]	; 0x70
 80038f8:	677a      	str	r2, [r7, #116]	; 0x74
 80038fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038fe:	4642      	mov	r2, r8
 8003900:	464b      	mov	r3, r9
 8003902:	1891      	adds	r1, r2, r2
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	415b      	adcs	r3, r3
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390e:	4641      	mov	r1, r8
 8003910:	1851      	adds	r1, r2, r1
 8003912:	6039      	str	r1, [r7, #0]
 8003914:	4649      	mov	r1, r9
 8003916:	414b      	adcs	r3, r1
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003926:	4659      	mov	r1, fp
 8003928:	00cb      	lsls	r3, r1, #3
 800392a:	4651      	mov	r1, sl
 800392c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003930:	4651      	mov	r1, sl
 8003932:	00ca      	lsls	r2, r1, #3
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	4603      	mov	r3, r0
 800393a:	4642      	mov	r2, r8
 800393c:	189b      	adds	r3, r3, r2
 800393e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003940:	464b      	mov	r3, r9
 8003942:	460a      	mov	r2, r1
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	663b      	str	r3, [r7, #96]	; 0x60
 8003954:	667a      	str	r2, [r7, #100]	; 0x64
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003962:	4649      	mov	r1, r9
 8003964:	008b      	lsls	r3, r1, #2
 8003966:	4641      	mov	r1, r8
 8003968:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800396c:	4641      	mov	r1, r8
 800396e:	008a      	lsls	r2, r1, #2
 8003970:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003974:	f7fd f872 	bl	8000a5c <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <UART_SetConfig+0x4e4>)
 800397e:	fba3 1302 	umull	r1, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2164      	movs	r1, #100	; 0x64
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <UART_SetConfig+0x4e4>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4422      	add	r2, r4
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039ac:	46bd      	mov	sp, r7
 80039ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b2:	bf00      	nop
 80039b4:	51eb851f 	.word	0x51eb851f

080039b8 <__errno>:
 80039b8:	4b01      	ldr	r3, [pc, #4]	; (80039c0 <__errno+0x8>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000010 	.word	0x20000010

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	4d0d      	ldr	r5, [pc, #52]	; (80039fc <__libc_init_array+0x38>)
 80039c8:	4c0d      	ldr	r4, [pc, #52]	; (8003a00 <__libc_init_array+0x3c>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	2600      	movs	r6, #0
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	4d0b      	ldr	r5, [pc, #44]	; (8003a04 <__libc_init_array+0x40>)
 80039d6:	4c0c      	ldr	r4, [pc, #48]	; (8003a08 <__libc_init_array+0x44>)
 80039d8:	f000 fc86 	bl	80042e8 <_init>
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	2600      	movs	r6, #0
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08004380 	.word	0x08004380
 8003a00:	08004380 	.word	0x08004380
 8003a04:	08004380 	.word	0x08004380
 8003a08:	08004384 	.word	0x08004384

08003a0c <siprintf>:
 8003a0c:	b40e      	push	{r1, r2, r3}
 8003a0e:	b500      	push	{lr}
 8003a10:	b09c      	sub	sp, #112	; 0x70
 8003a12:	ab1d      	add	r3, sp, #116	; 0x74
 8003a14:	9002      	str	r0, [sp, #8]
 8003a16:	9006      	str	r0, [sp, #24]
 8003a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a1c:	4809      	ldr	r0, [pc, #36]	; (8003a44 <siprintf+0x38>)
 8003a1e:	9107      	str	r1, [sp, #28]
 8003a20:	9104      	str	r1, [sp, #16]
 8003a22:	4909      	ldr	r1, [pc, #36]	; (8003a48 <siprintf+0x3c>)
 8003a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a28:	9105      	str	r1, [sp, #20]
 8003a2a:	6800      	ldr	r0, [r0, #0]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	a902      	add	r1, sp, #8
 8003a30:	f000 f868 	bl	8003b04 <_svfiprintf_r>
 8003a34:	9b02      	ldr	r3, [sp, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	b01c      	add	sp, #112	; 0x70
 8003a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a40:	b003      	add	sp, #12
 8003a42:	4770      	bx	lr
 8003a44:	20000010 	.word	0x20000010
 8003a48:	ffff0208 	.word	0xffff0208

08003a4c <__ssputs_r>:
 8003a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a50:	688e      	ldr	r6, [r1, #8]
 8003a52:	429e      	cmp	r6, r3
 8003a54:	4682      	mov	sl, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	4690      	mov	r8, r2
 8003a5a:	461f      	mov	r7, r3
 8003a5c:	d838      	bhi.n	8003ad0 <__ssputs_r+0x84>
 8003a5e:	898a      	ldrh	r2, [r1, #12]
 8003a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a64:	d032      	beq.n	8003acc <__ssputs_r+0x80>
 8003a66:	6825      	ldr	r5, [r4, #0]
 8003a68:	6909      	ldr	r1, [r1, #16]
 8003a6a:	eba5 0901 	sub.w	r9, r5, r1
 8003a6e:	6965      	ldr	r5, [r4, #20]
 8003a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a78:	3301      	adds	r3, #1
 8003a7a:	444b      	add	r3, r9
 8003a7c:	106d      	asrs	r5, r5, #1
 8003a7e:	429d      	cmp	r5, r3
 8003a80:	bf38      	it	cc
 8003a82:	461d      	movcc	r5, r3
 8003a84:	0553      	lsls	r3, r2, #21
 8003a86:	d531      	bpl.n	8003aec <__ssputs_r+0xa0>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f000 fb63 	bl	8004154 <_malloc_r>
 8003a8e:	4606      	mov	r6, r0
 8003a90:	b950      	cbnz	r0, 8003aa8 <__ssputs_r+0x5c>
 8003a92:	230c      	movs	r3, #12
 8003a94:	f8ca 3000 	str.w	r3, [sl]
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	6921      	ldr	r1, [r4, #16]
 8003aaa:	464a      	mov	r2, r9
 8003aac:	f000 fabe 	bl	800402c <memcpy>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	6126      	str	r6, [r4, #16]
 8003abe:	6165      	str	r5, [r4, #20]
 8003ac0:	444e      	add	r6, r9
 8003ac2:	eba5 0509 	sub.w	r5, r5, r9
 8003ac6:	6026      	str	r6, [r4, #0]
 8003ac8:	60a5      	str	r5, [r4, #8]
 8003aca:	463e      	mov	r6, r7
 8003acc:	42be      	cmp	r6, r7
 8003ace:	d900      	bls.n	8003ad2 <__ssputs_r+0x86>
 8003ad0:	463e      	mov	r6, r7
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	f000 fab6 	bl	8004048 <memmove>
 8003adc:	68a3      	ldr	r3, [r4, #8]
 8003ade:	1b9b      	subs	r3, r3, r6
 8003ae0:	60a3      	str	r3, [r4, #8]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	4433      	add	r3, r6
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e7db      	b.n	8003aa4 <__ssputs_r+0x58>
 8003aec:	462a      	mov	r2, r5
 8003aee:	f000 fba5 	bl	800423c <_realloc_r>
 8003af2:	4606      	mov	r6, r0
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d1e1      	bne.n	8003abc <__ssputs_r+0x70>
 8003af8:	6921      	ldr	r1, [r4, #16]
 8003afa:	4650      	mov	r0, sl
 8003afc:	f000 fabe 	bl	800407c <_free_r>
 8003b00:	e7c7      	b.n	8003a92 <__ssputs_r+0x46>
	...

08003b04 <_svfiprintf_r>:
 8003b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b08:	4698      	mov	r8, r3
 8003b0a:	898b      	ldrh	r3, [r1, #12]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	b09d      	sub	sp, #116	; 0x74
 8003b10:	4607      	mov	r7, r0
 8003b12:	460d      	mov	r5, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	d50e      	bpl.n	8003b36 <_svfiprintf_r+0x32>
 8003b18:	690b      	ldr	r3, [r1, #16]
 8003b1a:	b963      	cbnz	r3, 8003b36 <_svfiprintf_r+0x32>
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	f000 fb19 	bl	8004154 <_malloc_r>
 8003b22:	6028      	str	r0, [r5, #0]
 8003b24:	6128      	str	r0, [r5, #16]
 8003b26:	b920      	cbnz	r0, 8003b32 <_svfiprintf_r+0x2e>
 8003b28:	230c      	movs	r3, #12
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	e0d1      	b.n	8003cd6 <_svfiprintf_r+0x1d2>
 8003b32:	2340      	movs	r3, #64	; 0x40
 8003b34:	616b      	str	r3, [r5, #20]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b44:	2330      	movs	r3, #48	; 0x30
 8003b46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003cf0 <_svfiprintf_r+0x1ec>
 8003b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b4e:	f04f 0901 	mov.w	r9, #1
 8003b52:	4623      	mov	r3, r4
 8003b54:	469a      	mov	sl, r3
 8003b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b5a:	b10a      	cbz	r2, 8003b60 <_svfiprintf_r+0x5c>
 8003b5c:	2a25      	cmp	r2, #37	; 0x25
 8003b5e:	d1f9      	bne.n	8003b54 <_svfiprintf_r+0x50>
 8003b60:	ebba 0b04 	subs.w	fp, sl, r4
 8003b64:	d00b      	beq.n	8003b7e <_svfiprintf_r+0x7a>
 8003b66:	465b      	mov	r3, fp
 8003b68:	4622      	mov	r2, r4
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f7ff ff6d 	bl	8003a4c <__ssputs_r>
 8003b72:	3001      	adds	r0, #1
 8003b74:	f000 80aa 	beq.w	8003ccc <_svfiprintf_r+0x1c8>
 8003b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b7a:	445a      	add	r2, fp
 8003b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a2 	beq.w	8003ccc <_svfiprintf_r+0x1c8>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b92:	f10a 0a01 	add.w	sl, sl, #1
 8003b96:	9304      	str	r3, [sp, #16]
 8003b98:	9307      	str	r3, [sp, #28]
 8003b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba0:	4654      	mov	r4, sl
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba8:	4851      	ldr	r0, [pc, #324]	; (8003cf0 <_svfiprintf_r+0x1ec>)
 8003baa:	f7fc fb39 	bl	8000220 <memchr>
 8003bae:	9a04      	ldr	r2, [sp, #16]
 8003bb0:	b9d8      	cbnz	r0, 8003bea <_svfiprintf_r+0xe6>
 8003bb2:	06d0      	lsls	r0, r2, #27
 8003bb4:	bf44      	itt	mi
 8003bb6:	2320      	movmi	r3, #32
 8003bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bbc:	0711      	lsls	r1, r2, #28
 8003bbe:	bf44      	itt	mi
 8003bc0:	232b      	movmi	r3, #43	; 0x2b
 8003bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bca:	2b2a      	cmp	r3, #42	; 0x2a
 8003bcc:	d015      	beq.n	8003bfa <_svfiprintf_r+0xf6>
 8003bce:	9a07      	ldr	r2, [sp, #28]
 8003bd0:	4654      	mov	r4, sl
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f04f 0c0a 	mov.w	ip, #10
 8003bd8:	4621      	mov	r1, r4
 8003bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bde:	3b30      	subs	r3, #48	; 0x30
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	d94e      	bls.n	8003c82 <_svfiprintf_r+0x17e>
 8003be4:	b1b0      	cbz	r0, 8003c14 <_svfiprintf_r+0x110>
 8003be6:	9207      	str	r2, [sp, #28]
 8003be8:	e014      	b.n	8003c14 <_svfiprintf_r+0x110>
 8003bea:	eba0 0308 	sub.w	r3, r0, r8
 8003bee:	fa09 f303 	lsl.w	r3, r9, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	46a2      	mov	sl, r4
 8003bf8:	e7d2      	b.n	8003ba0 <_svfiprintf_r+0x9c>
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	1d19      	adds	r1, r3, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	9103      	str	r1, [sp, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bfbb      	ittet	lt
 8003c06:	425b      	neglt	r3, r3
 8003c08:	f042 0202 	orrlt.w	r2, r2, #2
 8003c0c:	9307      	strge	r3, [sp, #28]
 8003c0e:	9307      	strlt	r3, [sp, #28]
 8003c10:	bfb8      	it	lt
 8003c12:	9204      	strlt	r2, [sp, #16]
 8003c14:	7823      	ldrb	r3, [r4, #0]
 8003c16:	2b2e      	cmp	r3, #46	; 0x2e
 8003c18:	d10c      	bne.n	8003c34 <_svfiprintf_r+0x130>
 8003c1a:	7863      	ldrb	r3, [r4, #1]
 8003c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c1e:	d135      	bne.n	8003c8c <_svfiprintf_r+0x188>
 8003c20:	9b03      	ldr	r3, [sp, #12]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	9203      	str	r2, [sp, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bfb8      	it	lt
 8003c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c30:	3402      	adds	r4, #2
 8003c32:	9305      	str	r3, [sp, #20]
 8003c34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d00 <_svfiprintf_r+0x1fc>
 8003c38:	7821      	ldrb	r1, [r4, #0]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	f7fc faef 	bl	8000220 <memchr>
 8003c42:	b140      	cbz	r0, 8003c56 <_svfiprintf_r+0x152>
 8003c44:	2340      	movs	r3, #64	; 0x40
 8003c46:	eba0 000a 	sub.w	r0, r0, sl
 8003c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003c4e:	9b04      	ldr	r3, [sp, #16]
 8003c50:	4303      	orrs	r3, r0
 8003c52:	3401      	adds	r4, #1
 8003c54:	9304      	str	r3, [sp, #16]
 8003c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c5a:	4826      	ldr	r0, [pc, #152]	; (8003cf4 <_svfiprintf_r+0x1f0>)
 8003c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c60:	2206      	movs	r2, #6
 8003c62:	f7fc fadd 	bl	8000220 <memchr>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d038      	beq.n	8003cdc <_svfiprintf_r+0x1d8>
 8003c6a:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <_svfiprintf_r+0x1f4>)
 8003c6c:	bb1b      	cbnz	r3, 8003cb6 <_svfiprintf_r+0x1b2>
 8003c6e:	9b03      	ldr	r3, [sp, #12]
 8003c70:	3307      	adds	r3, #7
 8003c72:	f023 0307 	bic.w	r3, r3, #7
 8003c76:	3308      	adds	r3, #8
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c7c:	4433      	add	r3, r6
 8003c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c80:	e767      	b.n	8003b52 <_svfiprintf_r+0x4e>
 8003c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c86:	460c      	mov	r4, r1
 8003c88:	2001      	movs	r0, #1
 8003c8a:	e7a5      	b.n	8003bd8 <_svfiprintf_r+0xd4>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	3401      	adds	r4, #1
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	4619      	mov	r1, r3
 8003c94:	f04f 0c0a 	mov.w	ip, #10
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c9e:	3a30      	subs	r2, #48	; 0x30
 8003ca0:	2a09      	cmp	r2, #9
 8003ca2:	d903      	bls.n	8003cac <_svfiprintf_r+0x1a8>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0c5      	beq.n	8003c34 <_svfiprintf_r+0x130>
 8003ca8:	9105      	str	r1, [sp, #20]
 8003caa:	e7c3      	b.n	8003c34 <_svfiprintf_r+0x130>
 8003cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e7f0      	b.n	8003c98 <_svfiprintf_r+0x194>
 8003cb6:	ab03      	add	r3, sp, #12
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	462a      	mov	r2, r5
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <_svfiprintf_r+0x1f8>)
 8003cbe:	a904      	add	r1, sp, #16
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f3af 8000 	nop.w
 8003cc6:	1c42      	adds	r2, r0, #1
 8003cc8:	4606      	mov	r6, r0
 8003cca:	d1d6      	bne.n	8003c7a <_svfiprintf_r+0x176>
 8003ccc:	89ab      	ldrh	r3, [r5, #12]
 8003cce:	065b      	lsls	r3, r3, #25
 8003cd0:	f53f af2c 	bmi.w	8003b2c <_svfiprintf_r+0x28>
 8003cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cd6:	b01d      	add	sp, #116	; 0x74
 8003cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cdc:	ab03      	add	r3, sp, #12
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	462a      	mov	r2, r5
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <_svfiprintf_r+0x1f8>)
 8003ce4:	a904      	add	r1, sp, #16
 8003ce6:	4638      	mov	r0, r7
 8003ce8:	f000 f87a 	bl	8003de0 <_printf_i>
 8003cec:	e7eb      	b.n	8003cc6 <_svfiprintf_r+0x1c2>
 8003cee:	bf00      	nop
 8003cf0:	08004344 	.word	0x08004344
 8003cf4:	0800434e 	.word	0x0800434e
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	08003a4d 	.word	0x08003a4d
 8003d00:	0800434a 	.word	0x0800434a

08003d04 <_printf_common>:
 8003d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	4616      	mov	r6, r2
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	688a      	ldr	r2, [r1, #8]
 8003d0e:	690b      	ldr	r3, [r1, #16]
 8003d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bfb8      	it	lt
 8003d18:	4613      	movlt	r3, r2
 8003d1a:	6033      	str	r3, [r6, #0]
 8003d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d20:	4607      	mov	r7, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	b10a      	cbz	r2, 8003d2a <_printf_common+0x26>
 8003d26:	3301      	adds	r3, #1
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	0699      	lsls	r1, r3, #26
 8003d2e:	bf42      	ittt	mi
 8003d30:	6833      	ldrmi	r3, [r6, #0]
 8003d32:	3302      	addmi	r3, #2
 8003d34:	6033      	strmi	r3, [r6, #0]
 8003d36:	6825      	ldr	r5, [r4, #0]
 8003d38:	f015 0506 	ands.w	r5, r5, #6
 8003d3c:	d106      	bne.n	8003d4c <_printf_common+0x48>
 8003d3e:	f104 0a19 	add.w	sl, r4, #25
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	6832      	ldr	r2, [r6, #0]
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dc26      	bgt.n	8003d9a <_printf_common+0x96>
 8003d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d50:	1e13      	subs	r3, r2, #0
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	bf18      	it	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	0692      	lsls	r2, r2, #26
 8003d5a:	d42b      	bmi.n	8003db4 <_printf_common+0xb0>
 8003d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d60:	4649      	mov	r1, r9
 8003d62:	4638      	mov	r0, r7
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d01e      	beq.n	8003da8 <_printf_common+0xa4>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	68e5      	ldr	r5, [r4, #12]
 8003d6e:	6832      	ldr	r2, [r6, #0]
 8003d70:	f003 0306 	and.w	r3, r3, #6
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	bf08      	it	eq
 8003d78:	1aad      	subeq	r5, r5, r2
 8003d7a:	68a3      	ldr	r3, [r4, #8]
 8003d7c:	6922      	ldr	r2, [r4, #16]
 8003d7e:	bf0c      	ite	eq
 8003d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d84:	2500      	movne	r5, #0
 8003d86:	4293      	cmp	r3, r2
 8003d88:	bfc4      	itt	gt
 8003d8a:	1a9b      	subgt	r3, r3, r2
 8003d8c:	18ed      	addgt	r5, r5, r3
 8003d8e:	2600      	movs	r6, #0
 8003d90:	341a      	adds	r4, #26
 8003d92:	42b5      	cmp	r5, r6
 8003d94:	d11a      	bne.n	8003dcc <_printf_common+0xc8>
 8003d96:	2000      	movs	r0, #0
 8003d98:	e008      	b.n	8003dac <_printf_common+0xa8>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4652      	mov	r2, sl
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4638      	mov	r0, r7
 8003da2:	47c0      	blx	r8
 8003da4:	3001      	adds	r0, #1
 8003da6:	d103      	bne.n	8003db0 <_printf_common+0xac>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	3501      	adds	r5, #1
 8003db2:	e7c6      	b.n	8003d42 <_printf_common+0x3e>
 8003db4:	18e1      	adds	r1, r4, r3
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	2030      	movs	r0, #48	; 0x30
 8003dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dbe:	4422      	add	r2, r4
 8003dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc8:	3302      	adds	r3, #2
 8003dca:	e7c7      	b.n	8003d5c <_printf_common+0x58>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	47c0      	blx	r8
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d0e6      	beq.n	8003da8 <_printf_common+0xa4>
 8003dda:	3601      	adds	r6, #1
 8003ddc:	e7d9      	b.n	8003d92 <_printf_common+0x8e>
	...

08003de0 <_printf_i>:
 8003de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	7e0f      	ldrb	r7, [r1, #24]
 8003de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003de8:	2f78      	cmp	r7, #120	; 0x78
 8003dea:	4691      	mov	r9, r2
 8003dec:	4680      	mov	r8, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	469a      	mov	sl, r3
 8003df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003df6:	d807      	bhi.n	8003e08 <_printf_i+0x28>
 8003df8:	2f62      	cmp	r7, #98	; 0x62
 8003dfa:	d80a      	bhi.n	8003e12 <_printf_i+0x32>
 8003dfc:	2f00      	cmp	r7, #0
 8003dfe:	f000 80d8 	beq.w	8003fb2 <_printf_i+0x1d2>
 8003e02:	2f58      	cmp	r7, #88	; 0x58
 8003e04:	f000 80a3 	beq.w	8003f4e <_printf_i+0x16e>
 8003e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e10:	e03a      	b.n	8003e88 <_printf_i+0xa8>
 8003e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e16:	2b15      	cmp	r3, #21
 8003e18:	d8f6      	bhi.n	8003e08 <_printf_i+0x28>
 8003e1a:	a101      	add	r1, pc, #4	; (adr r1, 8003e20 <_printf_i+0x40>)
 8003e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e8d 	.word	0x08003e8d
 8003e28:	08003e09 	.word	0x08003e09
 8003e2c:	08003e09 	.word	0x08003e09
 8003e30:	08003e09 	.word	0x08003e09
 8003e34:	08003e09 	.word	0x08003e09
 8003e38:	08003e8d 	.word	0x08003e8d
 8003e3c:	08003e09 	.word	0x08003e09
 8003e40:	08003e09 	.word	0x08003e09
 8003e44:	08003e09 	.word	0x08003e09
 8003e48:	08003e09 	.word	0x08003e09
 8003e4c:	08003f99 	.word	0x08003f99
 8003e50:	08003ebd 	.word	0x08003ebd
 8003e54:	08003f7b 	.word	0x08003f7b
 8003e58:	08003e09 	.word	0x08003e09
 8003e5c:	08003e09 	.word	0x08003e09
 8003e60:	08003fbb 	.word	0x08003fbb
 8003e64:	08003e09 	.word	0x08003e09
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e09 	.word	0x08003e09
 8003e70:	08003e09 	.word	0x08003e09
 8003e74:	08003f83 	.word	0x08003f83
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	602a      	str	r2, [r5, #0]
 8003e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a3      	b.n	8003fd4 <_printf_i+0x1f4>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	6829      	ldr	r1, [r5, #0]
 8003e90:	0606      	lsls	r6, r0, #24
 8003e92:	f101 0304 	add.w	r3, r1, #4
 8003e96:	d50a      	bpl.n	8003eae <_printf_i+0xce>
 8003e98:	680e      	ldr	r6, [r1, #0]
 8003e9a:	602b      	str	r3, [r5, #0]
 8003e9c:	2e00      	cmp	r6, #0
 8003e9e:	da03      	bge.n	8003ea8 <_printf_i+0xc8>
 8003ea0:	232d      	movs	r3, #45	; 0x2d
 8003ea2:	4276      	negs	r6, r6
 8003ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea8:	485e      	ldr	r0, [pc, #376]	; (8004024 <_printf_i+0x244>)
 8003eaa:	230a      	movs	r3, #10
 8003eac:	e019      	b.n	8003ee2 <_printf_i+0x102>
 8003eae:	680e      	ldr	r6, [r1, #0]
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eb6:	bf18      	it	ne
 8003eb8:	b236      	sxthne	r6, r6
 8003eba:	e7ef      	b.n	8003e9c <_printf_i+0xbc>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	1d19      	adds	r1, r3, #4
 8003ec2:	6029      	str	r1, [r5, #0]
 8003ec4:	0601      	lsls	r1, r0, #24
 8003ec6:	d501      	bpl.n	8003ecc <_printf_i+0xec>
 8003ec8:	681e      	ldr	r6, [r3, #0]
 8003eca:	e002      	b.n	8003ed2 <_printf_i+0xf2>
 8003ecc:	0646      	lsls	r6, r0, #25
 8003ece:	d5fb      	bpl.n	8003ec8 <_printf_i+0xe8>
 8003ed0:	881e      	ldrh	r6, [r3, #0]
 8003ed2:	4854      	ldr	r0, [pc, #336]	; (8004024 <_printf_i+0x244>)
 8003ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2308      	moveq	r3, #8
 8003eda:	230a      	movne	r3, #10
 8003edc:	2100      	movs	r1, #0
 8003ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ee2:	6865      	ldr	r5, [r4, #4]
 8003ee4:	60a5      	str	r5, [r4, #8]
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	bfa2      	ittt	ge
 8003eea:	6821      	ldrge	r1, [r4, #0]
 8003eec:	f021 0104 	bicge.w	r1, r1, #4
 8003ef0:	6021      	strge	r1, [r4, #0]
 8003ef2:	b90e      	cbnz	r6, 8003ef8 <_printf_i+0x118>
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	d04d      	beq.n	8003f94 <_printf_i+0x1b4>
 8003ef8:	4615      	mov	r5, r2
 8003efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003efe:	fb03 6711 	mls	r7, r3, r1, r6
 8003f02:	5dc7      	ldrb	r7, [r0, r7]
 8003f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f08:	4637      	mov	r7, r6
 8003f0a:	42bb      	cmp	r3, r7
 8003f0c:	460e      	mov	r6, r1
 8003f0e:	d9f4      	bls.n	8003efa <_printf_i+0x11a>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d10b      	bne.n	8003f2c <_printf_i+0x14c>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	07de      	lsls	r6, r3, #31
 8003f18:	d508      	bpl.n	8003f2c <_printf_i+0x14c>
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	6861      	ldr	r1, [r4, #4]
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	bfde      	ittt	le
 8003f22:	2330      	movle	r3, #48	; 0x30
 8003f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f2c:	1b52      	subs	r2, r2, r5
 8003f2e:	6122      	str	r2, [r4, #16]
 8003f30:	f8cd a000 	str.w	sl, [sp]
 8003f34:	464b      	mov	r3, r9
 8003f36:	aa03      	add	r2, sp, #12
 8003f38:	4621      	mov	r1, r4
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	f7ff fee2 	bl	8003d04 <_printf_common>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d14c      	bne.n	8003fde <_printf_i+0x1fe>
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	b004      	add	sp, #16
 8003f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4e:	4835      	ldr	r0, [pc, #212]	; (8004024 <_printf_i+0x244>)
 8003f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f54:	6829      	ldr	r1, [r5, #0]
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f5c:	6029      	str	r1, [r5, #0]
 8003f5e:	061d      	lsls	r5, r3, #24
 8003f60:	d514      	bpl.n	8003f8c <_printf_i+0x1ac>
 8003f62:	07df      	lsls	r7, r3, #31
 8003f64:	bf44      	itt	mi
 8003f66:	f043 0320 	orrmi.w	r3, r3, #32
 8003f6a:	6023      	strmi	r3, [r4, #0]
 8003f6c:	b91e      	cbnz	r6, 8003f76 <_printf_i+0x196>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	f023 0320 	bic.w	r3, r3, #32
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	2310      	movs	r3, #16
 8003f78:	e7b0      	b.n	8003edc <_printf_i+0xfc>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	2378      	movs	r3, #120	; 0x78
 8003f84:	4828      	ldr	r0, [pc, #160]	; (8004028 <_printf_i+0x248>)
 8003f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f8a:	e7e3      	b.n	8003f54 <_printf_i+0x174>
 8003f8c:	0659      	lsls	r1, r3, #25
 8003f8e:	bf48      	it	mi
 8003f90:	b2b6      	uxthmi	r6, r6
 8003f92:	e7e6      	b.n	8003f62 <_printf_i+0x182>
 8003f94:	4615      	mov	r5, r2
 8003f96:	e7bb      	b.n	8003f10 <_printf_i+0x130>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	6826      	ldr	r6, [r4, #0]
 8003f9c:	6961      	ldr	r1, [r4, #20]
 8003f9e:	1d18      	adds	r0, r3, #4
 8003fa0:	6028      	str	r0, [r5, #0]
 8003fa2:	0635      	lsls	r5, r6, #24
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	d501      	bpl.n	8003fac <_printf_i+0x1cc>
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	e002      	b.n	8003fb2 <_printf_i+0x1d2>
 8003fac:	0670      	lsls	r0, r6, #25
 8003fae:	d5fb      	bpl.n	8003fa8 <_printf_i+0x1c8>
 8003fb0:	8019      	strh	r1, [r3, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	4615      	mov	r5, r2
 8003fb8:	e7ba      	b.n	8003f30 <_printf_i+0x150>
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	602a      	str	r2, [r5, #0]
 8003fc0:	681d      	ldr	r5, [r3, #0]
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f7fc f92a 	bl	8000220 <memchr>
 8003fcc:	b108      	cbz	r0, 8003fd2 <_printf_i+0x1f2>
 8003fce:	1b40      	subs	r0, r0, r5
 8003fd0:	6060      	str	r0, [r4, #4]
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fdc:	e7a8      	b.n	8003f30 <_printf_i+0x150>
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	47d0      	blx	sl
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d0ab      	beq.n	8003f44 <_printf_i+0x164>
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	079b      	lsls	r3, r3, #30
 8003ff0:	d413      	bmi.n	800401a <_printf_i+0x23a>
 8003ff2:	68e0      	ldr	r0, [r4, #12]
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	4298      	cmp	r0, r3
 8003ff8:	bfb8      	it	lt
 8003ffa:	4618      	movlt	r0, r3
 8003ffc:	e7a4      	b.n	8003f48 <_printf_i+0x168>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4632      	mov	r2, r6
 8004002:	4649      	mov	r1, r9
 8004004:	4640      	mov	r0, r8
 8004006:	47d0      	blx	sl
 8004008:	3001      	adds	r0, #1
 800400a:	d09b      	beq.n	8003f44 <_printf_i+0x164>
 800400c:	3501      	adds	r5, #1
 800400e:	68e3      	ldr	r3, [r4, #12]
 8004010:	9903      	ldr	r1, [sp, #12]
 8004012:	1a5b      	subs	r3, r3, r1
 8004014:	42ab      	cmp	r3, r5
 8004016:	dcf2      	bgt.n	8003ffe <_printf_i+0x21e>
 8004018:	e7eb      	b.n	8003ff2 <_printf_i+0x212>
 800401a:	2500      	movs	r5, #0
 800401c:	f104 0619 	add.w	r6, r4, #25
 8004020:	e7f5      	b.n	800400e <_printf_i+0x22e>
 8004022:	bf00      	nop
 8004024:	08004355 	.word	0x08004355
 8004028:	08004366 	.word	0x08004366

0800402c <memcpy>:
 800402c:	440a      	add	r2, r1
 800402e:	4291      	cmp	r1, r2
 8004030:	f100 33ff 	add.w	r3, r0, #4294967295
 8004034:	d100      	bne.n	8004038 <memcpy+0xc>
 8004036:	4770      	bx	lr
 8004038:	b510      	push	{r4, lr}
 800403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004042:	4291      	cmp	r1, r2
 8004044:	d1f9      	bne.n	800403a <memcpy+0xe>
 8004046:	bd10      	pop	{r4, pc}

08004048 <memmove>:
 8004048:	4288      	cmp	r0, r1
 800404a:	b510      	push	{r4, lr}
 800404c:	eb01 0402 	add.w	r4, r1, r2
 8004050:	d902      	bls.n	8004058 <memmove+0x10>
 8004052:	4284      	cmp	r4, r0
 8004054:	4623      	mov	r3, r4
 8004056:	d807      	bhi.n	8004068 <memmove+0x20>
 8004058:	1e43      	subs	r3, r0, #1
 800405a:	42a1      	cmp	r1, r4
 800405c:	d008      	beq.n	8004070 <memmove+0x28>
 800405e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004066:	e7f8      	b.n	800405a <memmove+0x12>
 8004068:	4402      	add	r2, r0
 800406a:	4601      	mov	r1, r0
 800406c:	428a      	cmp	r2, r1
 800406e:	d100      	bne.n	8004072 <memmove+0x2a>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800407a:	e7f7      	b.n	800406c <memmove+0x24>

0800407c <_free_r>:
 800407c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800407e:	2900      	cmp	r1, #0
 8004080:	d044      	beq.n	800410c <_free_r+0x90>
 8004082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004086:	9001      	str	r0, [sp, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f1a1 0404 	sub.w	r4, r1, #4
 800408e:	bfb8      	it	lt
 8004090:	18e4      	addlt	r4, r4, r3
 8004092:	f000 f913 	bl	80042bc <__malloc_lock>
 8004096:	4a1e      	ldr	r2, [pc, #120]	; (8004110 <_free_r+0x94>)
 8004098:	9801      	ldr	r0, [sp, #4]
 800409a:	6813      	ldr	r3, [r2, #0]
 800409c:	b933      	cbnz	r3, 80040ac <_free_r+0x30>
 800409e:	6063      	str	r3, [r4, #4]
 80040a0:	6014      	str	r4, [r2, #0]
 80040a2:	b003      	add	sp, #12
 80040a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a8:	f000 b90e 	b.w	80042c8 <__malloc_unlock>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d908      	bls.n	80040c2 <_free_r+0x46>
 80040b0:	6825      	ldr	r5, [r4, #0]
 80040b2:	1961      	adds	r1, r4, r5
 80040b4:	428b      	cmp	r3, r1
 80040b6:	bf01      	itttt	eq
 80040b8:	6819      	ldreq	r1, [r3, #0]
 80040ba:	685b      	ldreq	r3, [r3, #4]
 80040bc:	1949      	addeq	r1, r1, r5
 80040be:	6021      	streq	r1, [r4, #0]
 80040c0:	e7ed      	b.n	800409e <_free_r+0x22>
 80040c2:	461a      	mov	r2, r3
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b10b      	cbz	r3, 80040cc <_free_r+0x50>
 80040c8:	42a3      	cmp	r3, r4
 80040ca:	d9fa      	bls.n	80040c2 <_free_r+0x46>
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	1855      	adds	r5, r2, r1
 80040d0:	42a5      	cmp	r5, r4
 80040d2:	d10b      	bne.n	80040ec <_free_r+0x70>
 80040d4:	6824      	ldr	r4, [r4, #0]
 80040d6:	4421      	add	r1, r4
 80040d8:	1854      	adds	r4, r2, r1
 80040da:	42a3      	cmp	r3, r4
 80040dc:	6011      	str	r1, [r2, #0]
 80040de:	d1e0      	bne.n	80040a2 <_free_r+0x26>
 80040e0:	681c      	ldr	r4, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	4421      	add	r1, r4
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	e7da      	b.n	80040a2 <_free_r+0x26>
 80040ec:	d902      	bls.n	80040f4 <_free_r+0x78>
 80040ee:	230c      	movs	r3, #12
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	e7d6      	b.n	80040a2 <_free_r+0x26>
 80040f4:	6825      	ldr	r5, [r4, #0]
 80040f6:	1961      	adds	r1, r4, r5
 80040f8:	428b      	cmp	r3, r1
 80040fa:	bf04      	itt	eq
 80040fc:	6819      	ldreq	r1, [r3, #0]
 80040fe:	685b      	ldreq	r3, [r3, #4]
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	bf04      	itt	eq
 8004104:	1949      	addeq	r1, r1, r5
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	6054      	str	r4, [r2, #4]
 800410a:	e7ca      	b.n	80040a2 <_free_r+0x26>
 800410c:	b003      	add	sp, #12
 800410e:	bd30      	pop	{r4, r5, pc}
 8004110:	20000178 	.word	0x20000178

08004114 <sbrk_aligned>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	4e0e      	ldr	r6, [pc, #56]	; (8004150 <sbrk_aligned+0x3c>)
 8004118:	460c      	mov	r4, r1
 800411a:	6831      	ldr	r1, [r6, #0]
 800411c:	4605      	mov	r5, r0
 800411e:	b911      	cbnz	r1, 8004126 <sbrk_aligned+0x12>
 8004120:	f000 f8bc 	bl	800429c <_sbrk_r>
 8004124:	6030      	str	r0, [r6, #0]
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f8b7 	bl	800429c <_sbrk_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d00a      	beq.n	8004148 <sbrk_aligned+0x34>
 8004132:	1cc4      	adds	r4, r0, #3
 8004134:	f024 0403 	bic.w	r4, r4, #3
 8004138:	42a0      	cmp	r0, r4
 800413a:	d007      	beq.n	800414c <sbrk_aligned+0x38>
 800413c:	1a21      	subs	r1, r4, r0
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f8ac 	bl	800429c <_sbrk_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d101      	bne.n	800414c <sbrk_aligned+0x38>
 8004148:	f04f 34ff 	mov.w	r4, #4294967295
 800414c:	4620      	mov	r0, r4
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	2000017c 	.word	0x2000017c

08004154 <_malloc_r>:
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	1ccd      	adds	r5, r1, #3
 800415a:	f025 0503 	bic.w	r5, r5, #3
 800415e:	3508      	adds	r5, #8
 8004160:	2d0c      	cmp	r5, #12
 8004162:	bf38      	it	cc
 8004164:	250c      	movcc	r5, #12
 8004166:	2d00      	cmp	r5, #0
 8004168:	4607      	mov	r7, r0
 800416a:	db01      	blt.n	8004170 <_malloc_r+0x1c>
 800416c:	42a9      	cmp	r1, r5
 800416e:	d905      	bls.n	800417c <_malloc_r+0x28>
 8004170:	230c      	movs	r3, #12
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	2600      	movs	r6, #0
 8004176:	4630      	mov	r0, r6
 8004178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800417c:	4e2e      	ldr	r6, [pc, #184]	; (8004238 <_malloc_r+0xe4>)
 800417e:	f000 f89d 	bl	80042bc <__malloc_lock>
 8004182:	6833      	ldr	r3, [r6, #0]
 8004184:	461c      	mov	r4, r3
 8004186:	bb34      	cbnz	r4, 80041d6 <_malloc_r+0x82>
 8004188:	4629      	mov	r1, r5
 800418a:	4638      	mov	r0, r7
 800418c:	f7ff ffc2 	bl	8004114 <sbrk_aligned>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	4604      	mov	r4, r0
 8004194:	d14d      	bne.n	8004232 <_malloc_r+0xde>
 8004196:	6834      	ldr	r4, [r6, #0]
 8004198:	4626      	mov	r6, r4
 800419a:	2e00      	cmp	r6, #0
 800419c:	d140      	bne.n	8004220 <_malloc_r+0xcc>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4631      	mov	r1, r6
 80041a2:	4638      	mov	r0, r7
 80041a4:	eb04 0803 	add.w	r8, r4, r3
 80041a8:	f000 f878 	bl	800429c <_sbrk_r>
 80041ac:	4580      	cmp	r8, r0
 80041ae:	d13a      	bne.n	8004226 <_malloc_r+0xd2>
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	3503      	adds	r5, #3
 80041b4:	1a6d      	subs	r5, r5, r1
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	4629      	mov	r1, r5
 80041c4:	4638      	mov	r0, r7
 80041c6:	f7ff ffa5 	bl	8004114 <sbrk_aligned>
 80041ca:	3001      	adds	r0, #1
 80041cc:	d02b      	beq.n	8004226 <_malloc_r+0xd2>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	442b      	add	r3, r5
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	e00e      	b.n	80041f4 <_malloc_r+0xa0>
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	1b52      	subs	r2, r2, r5
 80041da:	d41e      	bmi.n	800421a <_malloc_r+0xc6>
 80041dc:	2a0b      	cmp	r2, #11
 80041de:	d916      	bls.n	800420e <_malloc_r+0xba>
 80041e0:	1961      	adds	r1, r4, r5
 80041e2:	42a3      	cmp	r3, r4
 80041e4:	6025      	str	r5, [r4, #0]
 80041e6:	bf18      	it	ne
 80041e8:	6059      	strne	r1, [r3, #4]
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	bf08      	it	eq
 80041ee:	6031      	streq	r1, [r6, #0]
 80041f0:	5162      	str	r2, [r4, r5]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	4638      	mov	r0, r7
 80041f6:	f104 060b 	add.w	r6, r4, #11
 80041fa:	f000 f865 	bl	80042c8 <__malloc_unlock>
 80041fe:	f026 0607 	bic.w	r6, r6, #7
 8004202:	1d23      	adds	r3, r4, #4
 8004204:	1af2      	subs	r2, r6, r3
 8004206:	d0b6      	beq.n	8004176 <_malloc_r+0x22>
 8004208:	1b9b      	subs	r3, r3, r6
 800420a:	50a3      	str	r3, [r4, r2]
 800420c:	e7b3      	b.n	8004176 <_malloc_r+0x22>
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	bf0c      	ite	eq
 8004214:	6032      	streq	r2, [r6, #0]
 8004216:	605a      	strne	r2, [r3, #4]
 8004218:	e7ec      	b.n	80041f4 <_malloc_r+0xa0>
 800421a:	4623      	mov	r3, r4
 800421c:	6864      	ldr	r4, [r4, #4]
 800421e:	e7b2      	b.n	8004186 <_malloc_r+0x32>
 8004220:	4634      	mov	r4, r6
 8004222:	6876      	ldr	r6, [r6, #4]
 8004224:	e7b9      	b.n	800419a <_malloc_r+0x46>
 8004226:	230c      	movs	r3, #12
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4638      	mov	r0, r7
 800422c:	f000 f84c 	bl	80042c8 <__malloc_unlock>
 8004230:	e7a1      	b.n	8004176 <_malloc_r+0x22>
 8004232:	6025      	str	r5, [r4, #0]
 8004234:	e7de      	b.n	80041f4 <_malloc_r+0xa0>
 8004236:	bf00      	nop
 8004238:	20000178 	.word	0x20000178

0800423c <_realloc_r>:
 800423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004240:	4680      	mov	r8, r0
 8004242:	4614      	mov	r4, r2
 8004244:	460e      	mov	r6, r1
 8004246:	b921      	cbnz	r1, 8004252 <_realloc_r+0x16>
 8004248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800424c:	4611      	mov	r1, r2
 800424e:	f7ff bf81 	b.w	8004154 <_malloc_r>
 8004252:	b92a      	cbnz	r2, 8004260 <_realloc_r+0x24>
 8004254:	f7ff ff12 	bl	800407c <_free_r>
 8004258:	4625      	mov	r5, r4
 800425a:	4628      	mov	r0, r5
 800425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004260:	f000 f838 	bl	80042d4 <_malloc_usable_size_r>
 8004264:	4284      	cmp	r4, r0
 8004266:	4607      	mov	r7, r0
 8004268:	d802      	bhi.n	8004270 <_realloc_r+0x34>
 800426a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800426e:	d812      	bhi.n	8004296 <_realloc_r+0x5a>
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f7ff ff6e 	bl	8004154 <_malloc_r>
 8004278:	4605      	mov	r5, r0
 800427a:	2800      	cmp	r0, #0
 800427c:	d0ed      	beq.n	800425a <_realloc_r+0x1e>
 800427e:	42bc      	cmp	r4, r7
 8004280:	4622      	mov	r2, r4
 8004282:	4631      	mov	r1, r6
 8004284:	bf28      	it	cs
 8004286:	463a      	movcs	r2, r7
 8004288:	f7ff fed0 	bl	800402c <memcpy>
 800428c:	4631      	mov	r1, r6
 800428e:	4640      	mov	r0, r8
 8004290:	f7ff fef4 	bl	800407c <_free_r>
 8004294:	e7e1      	b.n	800425a <_realloc_r+0x1e>
 8004296:	4635      	mov	r5, r6
 8004298:	e7df      	b.n	800425a <_realloc_r+0x1e>
	...

0800429c <_sbrk_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d06      	ldr	r5, [pc, #24]	; (80042b8 <_sbrk_r+0x1c>)
 80042a0:	2300      	movs	r3, #0
 80042a2:	4604      	mov	r4, r0
 80042a4:	4608      	mov	r0, r1
 80042a6:	602b      	str	r3, [r5, #0]
 80042a8:	f7fd f840 	bl	800132c <_sbrk>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_sbrk_r+0x1a>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_sbrk_r+0x1a>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20000180 	.word	0x20000180

080042bc <__malloc_lock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	; (80042c4 <__malloc_lock+0x8>)
 80042be:	f000 b811 	b.w	80042e4 <__retarget_lock_acquire_recursive>
 80042c2:	bf00      	nop
 80042c4:	20000184 	.word	0x20000184

080042c8 <__malloc_unlock>:
 80042c8:	4801      	ldr	r0, [pc, #4]	; (80042d0 <__malloc_unlock+0x8>)
 80042ca:	f000 b80c 	b.w	80042e6 <__retarget_lock_release_recursive>
 80042ce:	bf00      	nop
 80042d0:	20000184 	.word	0x20000184

080042d4 <_malloc_usable_size_r>:
 80042d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d8:	1f18      	subs	r0, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbc      	itt	lt
 80042de:	580b      	ldrlt	r3, [r1, r0]
 80042e0:	18c0      	addlt	r0, r0, r3
 80042e2:	4770      	bx	lr

080042e4 <__retarget_lock_acquire_recursive>:
 80042e4:	4770      	bx	lr

080042e6 <__retarget_lock_release_recursive>:
 80042e6:	4770      	bx	lr

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
