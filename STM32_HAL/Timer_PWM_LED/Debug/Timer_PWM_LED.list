
Timer_PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c60  08002c60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c68  08002c68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c68  08002c68  00012c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002c7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002c7c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a15  00000000  00000000  0002d70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002f120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021818  00000000  00000000  00030798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db6e  00000000  00000000  00051fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf64d  00000000  00000000  0005fb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f16b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  0012f1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c30 	.word	0x08002c30

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002c30 	.word	0x08002c30

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
TIM_HandleTypeDef htimer2;
TIM_HandleTypeDef htimer6;
UART_HandleTypeDef huart2;

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	uint16_t brightness=0;
 800050e:	2300      	movs	r3, #0
 8000510:	80fb      	strh	r3, [r7, #6]

	HAL_Init();
 8000512:	f000 fa3b 	bl	800098c <HAL_Init>

	SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
 8000516:	2032      	movs	r0, #50	; 0x32
 8000518:	f000 f830 	bl	800057c <SystemClockConfig>

	GPIO_Init();
 800051c:	f000 f8bc 	bl	8000698 <GPIO_Init>

	UART2_Init();
 8000520:	f000 f8de 	bl	80006e0 <UART2_Init>
	TIMER2_Init();
 8000524:	f000 f902 	bl	800072c <TIMER2_Init>

	if(HAL_TIM_PWM_Start(&htimer2, TIM_CHANNEL_1)!=HAL_OK)
 8000528:	2100      	movs	r1, #0
 800052a:	4813      	ldr	r0, [pc, #76]	; (8000578 <main+0x70>)
 800052c:	f001 fb46 	bl	8001bbc <HAL_TIM_PWM_Start>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d00c      	beq.n	8000550 <main+0x48>
	{
		Error_handler();
 8000536:	f000 f92d 	bl	8000794 <Error_handler>
	}


	while(1)
	{
		while( brightness < htimer2.Init.Period)
 800053a:	e009      	b.n	8000550 <main+0x48>
		{
			brightness += 20;
 800053c:	88fb      	ldrh	r3, [r7, #6]
 800053e:	3314      	adds	r3, #20
 8000540:	80fb      	strh	r3, [r7, #6]
			__HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, brightness);
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x70>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	88fa      	ldrh	r2, [r7, #6]
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 fa90 	bl	8000a70 <HAL_Delay>
		while( brightness < htimer2.Init.Period)
 8000550:	88fa      	ldrh	r2, [r7, #6]
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <main+0x70>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3f0      	bcc.n	800053c <main+0x34>

		}

		while (brightness > 0) {
 800055a:	e009      	b.n	8000570 <main+0x68>
			brightness -= 20;
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	3b14      	subs	r3, #20
 8000560:	80fb      	strh	r3, [r7, #6]
			__HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_1, brightness);
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <main+0x70>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	88fa      	ldrh	r2, [r7, #6]
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f000 fa80 	bl	8000a70 <HAL_Delay>
		while (brightness > 0) {
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1f2      	bne.n	800055c <main+0x54>
		while( brightness < htimer2.Init.Period)
 8000576:	e7eb      	b.n	8000550 <main+0x48>
 8000578:	20000028 	.word	0x20000028

0800057c <SystemClockConfig>:


}

void SystemClockConfig(uint8_t clock_freq )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8000586:	2306      	movs	r3, #6
 8000588:	623b      	str	r3, [r7, #32]
	Osc_Init.HSIState = RCC_HSI_ON;
 800058a:	2301      	movs	r3, #1
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
	Osc_Init.LSEState = RCC_LSE_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.HSICalibrationValue = 16;
 8000592:	2310      	movs	r3, #16
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2300      	movs	r3, #0
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b78      	cmp	r3, #120	; 0x78
 80005a2:	d032      	beq.n	800060a <SystemClockConfig+0x8e>
 80005a4:	2b78      	cmp	r3, #120	; 0x78
 80005a6:	dc71      	bgt.n	800068c <SystemClockConfig+0x110>
 80005a8:	2b32      	cmp	r3, #50	; 0x32
 80005aa:	d002      	beq.n	80005b2 <SystemClockConfig+0x36>
 80005ac:	2b54      	cmp	r3, #84	; 0x54
 80005ae:	d016      	beq.n	80005de <SystemClockConfig+0x62>
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
	     break;

	  default:
	   return ;
 80005b0:	e06c      	b.n	800068c <SystemClockConfig+0x110>
		  Osc_Init.PLL.PLLM = 8;
 80005b2:	2308      	movs	r3, #8
 80005b4:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 80005b6:	2332      	movs	r3, #50	; 0x32
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
	     break;
 80005dc:	e02c      	b.n	8000638 <SystemClockConfig+0xbc>
		  Osc_Init.PLL.PLLM = 8;
 80005de:	2308      	movs	r3, #8
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 80005e2:	2354      	movs	r3, #84	; 0x54
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
	     break;
 8000608:	e016      	b.n	8000638 <SystemClockConfig+0xbc>
		  Osc_Init.PLL.PLLM = 8;
 800060a:	2308      	movs	r3, #8
 800060c:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 800060e:	2378      	movs	r3, #120	; 0x78
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Osc_Init.PLL.PLLR = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	653b      	str	r3, [r7, #80]	; 0x50
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61fb      	str	r3, [r7, #28]
	     break;
 8000636:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ffcf 	bl	80015e0 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClockConfig+0xd0>
	{
			Error_handler();
 8000648:	f000 f8a4 	bl	8000794 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd00 	bl	8001058 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClockConfig+0xe6>
	{
		Error_handler();
 800065e:	f000 f899 	bl	8000794 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000662:	f000 fddf 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 8000666:	6578      	str	r0, [r7, #84]	; 0x54
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <SystemClockConfig+0x118>)
 800066c:	fba2 2303 	umull	r2, r3, r2, r3
 8000670:	099b      	lsrs	r3, r3, #6
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fb25 	bl	8000cc2 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000678:	2004      	movs	r0, #4
 800067a:	f000 fb2f 	bl	8000cdc <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	f04f 30ff 	mov.w	r0, #4294967295
 8000686:	f000 faf2 	bl	8000c6e <HAL_NVIC_SetPriority>
 800068a:	e000      	b.n	800068e <SystemClockConfig+0x112>
	   return ;
 800068c:	bf00      	nop

}
 800068e:	3758      	adds	r7, #88	; 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	10624dd3 	.word	0x10624dd3

08000698 <GPIO_Init>:


void GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <GPIO_Init+0x40>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <GPIO_Init+0x40>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <GPIO_Init+0x40>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80006ba:	2320      	movs	r3, #32
 80006bc:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <GPIO_Init+0x44>)
 80006cc:	f000 fb30 	bl	8000d30 <HAL_GPIO_Init>
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <UART2_Init>:

void UART2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	huart2.Instance=USART2;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <UART2_Init+0x44>)
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <UART2_Init+0x48>)
 80006e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate=115200;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <UART2_Init+0x44>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength= UART_WORDLENGTH_8B ;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <UART2_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <UART2_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity=UART_PARITY_NONE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <UART2_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl=UART_HWCONTROL_NONE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <UART2_Init+0x44>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode=UART_MODE_TX_RX;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <UART2_Init+0x44>)
 800070c:	220c      	movs	r2, #12
 800070e:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2)!=HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <UART2_Init+0x44>)
 8000712:	f001 ffa0 	bl	8002656 <HAL_UART_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <UART2_Init+0x40>
	{
		Error_handler();
 800071c:	f000 f83a 	bl	8000794 <Error_handler>
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000070 	.word	0x20000070
 8000728:	40004400 	.word	0x40004400

0800072c <TIMER2_Init>:

 void TIMER2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
	 TIM_OC_InitTypeDef tim2PWM_Config;
	 htimer2.Instance = TIM2;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <TIMER2_Init+0x64>)
 8000734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000738:	601a      	str	r2, [r3, #0]
	 htimer2.Init.Period = 10000-1;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <TIMER2_Init+0x64>)
 800073c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000740:	60da      	str	r2, [r3, #12]
	 htimer2.Init.Prescaler = 4999;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <TIMER2_Init+0x64>)
 8000744:	f241 3287 	movw	r2, #4999	; 0x1387
 8000748:	605a      	str	r2, [r3, #4]
	 if(HAL_TIM_PWM_Init(&htimer2)!=HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	; (8000790 <TIMER2_Init+0x64>)
 800074c:	f001 f9e6 	bl	8001b1c <HAL_TIM_PWM_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <TIMER2_Init+0x2e>
	 {
		 Error_handler();
 8000756:	f000 f81d 	bl	8000794 <Error_handler>
	 }

	 memset(&tim2PWM_Config,0,sizeof(tim2PWM_Config));
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	221c      	movs	r2, #28
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fa5d 	bl	8002c20 <memset>

	 tim2PWM_Config.OCMode=TIM_OCMODE_PWM1;
 8000766:	2360      	movs	r3, #96	; 0x60
 8000768:	607b      	str	r3, [r7, #4]
	 tim2PWM_Config.OCPolarity=TIM_OCPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
	 tim2PWM_Config.Pulse=0;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
	 if(HAL_TIM_PWM_ConfigChannel(&htimer2, &tim2PWM_Config, TIM_CHANNEL_1)!=HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <TIMER2_Init+0x64>)
 800077a:	f001 fbef 	bl	8001f5c <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <TIMER2_Init+0x5c>
	 {
		 Error_handler();
 8000784:	f000 f806 	bl	8000794 <Error_handler>
	 }



}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000028 	.word	0x20000028

08000794 <Error_handler>:



void Error_handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	while(1);
 8000798:	e7fe      	b.n	8000798 <Error_handler+0x4>
	...

0800079c <HAL_MspInit>:
#include"stm32f4xx_hal.h"

#include "main.h"

void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 fa59 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x40>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <HAL_MspInit+0x40>)
 80007ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80007b0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	f06f 000b 	mvn.w	r0, #11
 80007ba:	f000 fa58 	bl	8000c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	f06f 000a 	mvn.w	r0, #10
 80007c6:	f000 fa52 	bl	8000c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	f06f 0009 	mvn.w	r0, #9
 80007d2:	f000 fa4c 	bl	8000c6e <HAL_NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef tim2OC_ch_gpios;
	 //1. enable the peripheral clock for the timer2 peripheral
	 __HAL_RCC_TIM2_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_TIM_PWM_MspInit+0x78>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]


	 //2. Configure gpios to behave as timer2 channel 1,2,3 and 4
	 /* PA0 --> TIM2_CH1*/
	tim2OC_ch_gpios.Pin = GPIO_PIN_5|GPIO_PIN_1;
 8000820:	2322      	movs	r3, #34	; 0x22
 8000822:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_PULLDOWN;
 8000828:	2302      	movs	r3, #2
 800082a:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 8000830:	2301      	movs	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <HAL_TIM_PWM_MspInit+0x7c>)
 800083c:	f000 fa78 	bl	8000d30 <HAL_GPIO_Init>

	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 8000840:	2200      	movs	r2, #0
 8000842:	210f      	movs	r1, #15
 8000844:	201c      	movs	r0, #28
 8000846:	f000 fa12 	bl	8000c6e <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800084a:	201c      	movs	r0, #28
 800084c:	f000 fa2b 	bl	8000ca6 <HAL_NVIC_EnableIRQ>


}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_UART_MspInit>:




 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0x88>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x88>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80008b0:	2307      	movs	r3, #7
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <HAL_UART_MspInit+0x8c>)
 80008bc:	f000 fa38 	bl	8000d30 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80008c0:	2308      	movs	r3, #8
 80008c2:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <HAL_UART_MspInit+0x8c>)
 80008cc:	f000 fa30 	bl	8000d30 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d0:	2026      	movs	r0, #38	; 0x26
 80008d2:	f000 f9e8 	bl	8000ca6 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	2026      	movs	r0, #38	; 0x26
 80008dc:	f000 f9c7 	bl	8000c6e <HAL_NVIC_SetPriority>

}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <SysTick_Handler>:
#include"stm32f4xx.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008f4:	f000 f89c 	bl	8000a30 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80008f8:	f000 fa0c 	bl	8000d14 <HAL_SYSTICK_IRQHandler>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM6_DAC_IRQHandler+0x10>)
 8000906:	f001 fa21 	bl	8001d4c <HAL_TIM_IRQHandler>

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000028 	.word	0x20000028

08000914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000962:	f7ff ffd7 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f002 f937 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096a:	f7ff fdcd 	bl	8000508 <main>
  bx  lr    
 800096e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	08002c70 	.word	0x08002c70
  ldr r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000984:	200000b8 	.word	0x200000b8

08000988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_Init+0x40>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_Init+0x40>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x40>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f94f 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	200f      	movs	r0, #15
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff feec 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023c00 	.word	0x40023c00

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f967 	bl	8000cc2 <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f92f 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200000b4 	.word	0x200000b4

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000b4 	.word	0x200000b4

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffde 	bl	8000a58 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff29 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff3e 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff8e 	bl	8000bac <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff31 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffa2 	bl	8000c14 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d106      	bne.n	8000cf8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cf6:	e005      	b.n	8000d04 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cfe:	f023 0304 	bic.w	r3, r3, #4
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d18:	f000 f802 	bl	8000d20 <HAL_SYSTICK_Callback>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	; 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e165      	b.n	8001018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8154 	bne.w	8001012 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80ae 	beq.w	8001012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a5c      	ldr	r2, [pc, #368]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <HAL_GPIO_Init+0x300>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed2:	4a58      	ldr	r2, [pc, #352]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4f      	ldr	r2, [pc, #316]	; (8001038 <HAL_GPIO_Init+0x308>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x21a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4e      	ldr	r2, [pc, #312]	; (800103c <HAL_GPIO_Init+0x30c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x216>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4d      	ldr	r2, [pc, #308]	; (8001040 <HAL_GPIO_Init+0x310>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x212>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <HAL_GPIO_Init+0x314>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x20e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4b      	ldr	r2, [pc, #300]	; (8001048 <HAL_GPIO_Init+0x318>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x20a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4a      	ldr	r2, [pc, #296]	; (800104c <HAL_GPIO_Init+0x31c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x206>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a49      	ldr	r2, [pc, #292]	; (8001050 <HAL_GPIO_Init+0x320>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x202>
 8000f2e:	2306      	movs	r3, #6
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f32:	2307      	movs	r3, #7
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x21c>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	; (8001034 <HAL_GPIO_Init+0x304>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x324>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_GPIO_Init+0x324>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae96 	bls.w	8000d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40021400 	.word	0x40021400
 8001050:	40021800 	.word	0x40021800
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0cc      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d90c      	bls.n	8001094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0b8      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ac:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	494d      	ldr	r1, [pc, #308]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d044      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d119      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001112:	2b03      	cmp	r3, #3
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e06f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e067      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fc86 	bl	8000a58 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fc82 	bl	8000a58 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e04f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20c      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e032      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011de:	f000 f855 	bl	800128c <HAL_RCC_GetSysClockFreq>
 80011e2:	4602      	mov	r2, r0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	490a      	ldr	r1, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	5ccb      	ldrb	r3, [r1, r3]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fbe6 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00
 8001214:	40023800 	.word	0x40023800
 8001218:	08002c48 	.word	0x08002c48
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_RCC_GetHCLKFreq+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000000 	.word	0x20000000

0800123c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001240:	f7ff fff0 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	4903      	ldr	r1, [pc, #12]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001252:	5ccb      	ldrb	r3, [r1, r3]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	08002c58 	.word	0x08002c58

08001264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001268:	f7ff ffdc 	bl	8001224 <HAL_RCC_GetHCLKFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	0b5b      	lsrs	r3, r3, #13
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	4903      	ldr	r1, [pc, #12]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	08002c58 	.word	0x08002c58

0800128c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001290:	b0a6      	sub	sp, #152	; 0x98
 8001292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012b2:	4bc8      	ldr	r3, [pc, #800]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	f200 817e 	bhi.w	80015bc <HAL_RCC_GetSysClockFreq+0x330>
 80012c0:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012fd 	.word	0x080012fd
 80012cc:	080015bd 	.word	0x080015bd
 80012d0:	080015bd 	.word	0x080015bd
 80012d4:	080015bd 	.word	0x080015bd
 80012d8:	08001305 	.word	0x08001305
 80012dc:	080015bd 	.word	0x080015bd
 80012e0:	080015bd 	.word	0x080015bd
 80012e4:	080015bd 	.word	0x080015bd
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	080015bd 	.word	0x080015bd
 80012f0:	080015bd 	.word	0x080015bd
 80012f4:	080015bd 	.word	0x080015bd
 80012f8:	08001477 	.word	0x08001477
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012fc:	4bb6      	ldr	r3, [pc, #728]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80012fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001302:	e15f      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001304:	4bb5      	ldr	r3, [pc, #724]	; (80015dc <HAL_RCC_GetSysClockFreq+0x350>)
 8001306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800130a:	e15b      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130c:	4bb1      	ldr	r3, [pc, #708]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001318:	4bae      	ldr	r3, [pc, #696]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d031      	beq.n	8001388 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001324:	4bab      	ldr	r3, [pc, #684]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	099b      	lsrs	r3, r3, #6
 800132a:	2200      	movs	r2, #0
 800132c:	66bb      	str	r3, [r7, #104]	; 0x68
 800132e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001336:	663b      	str	r3, [r7, #96]	; 0x60
 8001338:	2300      	movs	r3, #0
 800133a:	667b      	str	r3, [r7, #100]	; 0x64
 800133c:	4ba7      	ldr	r3, [pc, #668]	; (80015dc <HAL_RCC_GetSysClockFreq+0x350>)
 800133e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001342:	462a      	mov	r2, r5
 8001344:	fb03 f202 	mul.w	r2, r3, r2
 8001348:	2300      	movs	r3, #0
 800134a:	4621      	mov	r1, r4
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	4aa2      	ldr	r2, [pc, #648]	; (80015dc <HAL_RCC_GetSysClockFreq+0x350>)
 8001354:	4621      	mov	r1, r4
 8001356:	fba1 1202 	umull	r1, r2, r1, r2
 800135a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800135c:	460a      	mov	r2, r1
 800135e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001360:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001362:	4413      	add	r3, r2
 8001364:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800136a:	2200      	movs	r2, #0
 800136c:	65bb      	str	r3, [r7, #88]	; 0x58
 800136e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001370:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001374:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001378:	f7fe ff44 	bl	8000204 <__aeabi_uldivmod>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4613      	mov	r3, r2
 8001382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001386:	e064      	b.n	8001452 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	2200      	movs	r2, #0
 8001390:	653b      	str	r3, [r7, #80]	; 0x50
 8001392:	657a      	str	r2, [r7, #84]	; 0x54
 8001394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
 800139c:	2300      	movs	r3, #0
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80013a4:	4622      	mov	r2, r4
 80013a6:	462b      	mov	r3, r5
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	0159      	lsls	r1, r3, #5
 80013b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013b6:	0150      	lsls	r0, r2, #5
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4621      	mov	r1, r4
 80013be:	1a51      	subs	r1, r2, r1
 80013c0:	6139      	str	r1, [r7, #16]
 80013c2:	4629      	mov	r1, r5
 80013c4:	eb63 0301 	sbc.w	r3, r3, r1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013d6:	4659      	mov	r1, fp
 80013d8:	018b      	lsls	r3, r1, #6
 80013da:	4651      	mov	r1, sl
 80013dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013e0:	4651      	mov	r1, sl
 80013e2:	018a      	lsls	r2, r1, #6
 80013e4:	4651      	mov	r1, sl
 80013e6:	ebb2 0801 	subs.w	r8, r2, r1
 80013ea:	4659      	mov	r1, fp
 80013ec:	eb63 0901 	sbc.w	r9, r3, r1
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001400:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001404:	4690      	mov	r8, r2
 8001406:	4699      	mov	r9, r3
 8001408:	4623      	mov	r3, r4
 800140a:	eb18 0303 	adds.w	r3, r8, r3
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	462b      	mov	r3, r5
 8001412:	eb49 0303 	adc.w	r3, r9, r3
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001424:	4629      	mov	r1, r5
 8001426:	028b      	lsls	r3, r1, #10
 8001428:	4621      	mov	r1, r4
 800142a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800142e:	4621      	mov	r1, r4
 8001430:	028a      	lsls	r2, r1, #10
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800143a:	2200      	movs	r2, #0
 800143c:	643b      	str	r3, [r7, #64]	; 0x40
 800143e:	647a      	str	r2, [r7, #68]	; 0x44
 8001440:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001444:	f7fe fede 	bl	8000204 <__aeabi_uldivmod>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4613      	mov	r3, r2
 800144e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001452:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0c1b      	lsrs	r3, r3, #16
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	3301      	adds	r3, #1
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001464:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001474:	e0a6      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001476:	4b57      	ldr	r3, [pc, #348]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001482:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d02a      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148e:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	2200      	movs	r2, #0
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
 8001498:	63fa      	str	r2, [r7, #60]	; 0x3c
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014a0:	2100      	movs	r1, #0
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <HAL_RCC_GetSysClockFreq+0x350>)
 80014a4:	fb03 f201 	mul.w	r2, r3, r1
 80014a8:	2300      	movs	r3, #0
 80014aa:	fb00 f303 	mul.w	r3, r0, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_RCC_GetSysClockFreq+0x350>)
 80014b2:	fba0 1202 	umull	r1, r2, r0, r2
 80014b6:	677a      	str	r2, [r7, #116]	; 0x74
 80014b8:	460a      	mov	r2, r1
 80014ba:	673a      	str	r2, [r7, #112]	; 0x70
 80014bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80014be:	4413      	add	r3, r2
 80014c0:	677b      	str	r3, [r7, #116]	; 0x74
 80014c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014c6:	2200      	movs	r2, #0
 80014c8:	633b      	str	r3, [r7, #48]	; 0x30
 80014ca:	637a      	str	r2, [r7, #52]	; 0x34
 80014cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80014d4:	f7fe fe96 	bl	8000204 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014e2:	e05b      	b.n	800159c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	2200      	movs	r2, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001500:	4642      	mov	r2, r8
 8001502:	464b      	mov	r3, r9
 8001504:	f04f 0000 	mov.w	r0, #0
 8001508:	f04f 0100 	mov.w	r1, #0
 800150c:	0159      	lsls	r1, r3, #5
 800150e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001512:	0150      	lsls	r0, r2, #5
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4641      	mov	r1, r8
 800151a:	ebb2 0a01 	subs.w	sl, r2, r1
 800151e:	4649      	mov	r1, r9
 8001520:	eb63 0b01 	sbc.w	fp, r3, r1
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001530:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001534:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001538:	ebb2 040a 	subs.w	r4, r2, sl
 800153c:	eb63 050b 	sbc.w	r5, r3, fp
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	00eb      	lsls	r3, r5, #3
 800154a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800154e:	00e2      	lsls	r2, r4, #3
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	4643      	mov	r3, r8
 8001556:	18e3      	adds	r3, r4, r3
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	464b      	mov	r3, r9
 800155c:	eb45 0303 	adc.w	r3, r5, r3
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800156e:	4629      	mov	r1, r5
 8001570:	028b      	lsls	r3, r1, #10
 8001572:	4621      	mov	r1, r4
 8001574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001578:	4621      	mov	r1, r4
 800157a:	028a      	lsls	r2, r1, #10
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001584:	2200      	movs	r2, #0
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	61fa      	str	r2, [r7, #28]
 800158a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158e:	f7fe fe39 	bl	8000204 <__aeabi_uldivmod>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4613      	mov	r3, r2
 8001598:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	0f1b      	lsrs	r3, r3, #28
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80015aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80015ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80015ba:	e003      	b.n	80015c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80015c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3798      	adds	r7, #152	; 0x98
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	00f42400 	.word	0x00f42400
 80015dc:	017d7840 	.word	0x017d7840

080015e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e28d      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8083 	beq.w	8001706 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001600:	4b94      	ldr	r3, [pc, #592]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d019      	beq.n	8001640 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800160c:	4b91      	ldr	r3, [pc, #580]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001614:	2b08      	cmp	r3, #8
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001618:	4b8e      	ldr	r3, [pc, #568]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001624:	d00c      	beq.n	8001640 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d112      	bne.n	8001658 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163e:	d10b      	bne.n	8001658 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	4b84      	ldr	r3, [pc, #528]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05b      	beq.n	8001704 <HAL_RCC_OscConfig+0x124>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d157      	bne.n	8001704 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e25a      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x90>
 8001662:	4b7c      	ldr	r3, [pc, #496]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7b      	ldr	r2, [pc, #492]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xcc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0xb4>
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a72      	ldr	r2, [pc, #456]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xcc>
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9d0 	bl	8000a58 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f9cc 	bl	8000a58 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e21f      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xdc>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff f9bc 	bl	8000a58 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f9b8 	bl	8000a58 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e20b      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x104>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06f      	beq.n	80017f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001712:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d017      	beq.n	800174e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800171e:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001726:	2b08      	cmp	r3, #8
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x186>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1d3      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x278>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff f965 	bl	8000a58 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f961 	bl	8000a58 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1b4      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x278>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f944 	bl	8000a58 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff f940 	bl	8000a58 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e193      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x27c>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff f924 	bl	8000a58 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff f920 	bl	8000a58 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e173      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x274>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x234>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x27c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff f90d 	bl	8000a58 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff f909 	bl	8000a58 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e15c      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b8a      	ldr	r3, [pc, #552]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b83      	ldr	r3, [pc, #524]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a7e      	ldr	r2, [pc, #504]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f8c9 	bl	8000a58 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff f8c5 	bl	8000a58 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e118      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6c      	ldr	r3, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x31e>
 80018f0:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a65      	ldr	r2, [pc, #404]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x358>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x340>
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a60      	ldr	r2, [pc, #384]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b5e      	ldr	r3, [pc, #376]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5d      	ldr	r2, [pc, #372]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x358>
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a59      	ldr	r2, [pc, #356]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a56      	ldr	r2, [pc, #344]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff f88a 	bl	8000a58 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f886 	bl	8000a58 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0d7      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x368>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f874 	bl	8000a58 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f870 	bl	8000a58 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0c1      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ad 	beq.w	8001b0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d060      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d145      	bne.n	8001a52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff f844 	bl	8000a58 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f840 	bl	8000a58 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e093      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	071b      	lsls	r3, r3, #28
 8001a1e:	491b      	ldr	r1, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f815 	bl	8000a58 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f811 	bl	8000a58 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e064      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x452>
 8001a50:	e05c      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7fe fffe 	bl	8000a58 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7fe fffa 	bl	8000a58 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04d      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x480>
 8001a7e:	e045      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e040      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_RCC_OscConfig+0x538>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d030      	beq.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d129      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d122      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d119      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10f      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e041      	b.n	8001bb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fe4c 	bl	80007e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3304      	adds	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 faf2 	bl	8002144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_TIM_PWM_Start+0x24>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e022      	b.n	8001c26 <HAL_TIM_PWM_Start+0x6a>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d109      	bne.n	8001bfa <HAL_TIM_PWM_Start+0x3e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	e015      	b.n	8001c26 <HAL_TIM_PWM_Start+0x6a>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d109      	bne.n	8001c14 <HAL_TIM_PWM_Start+0x58>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e008      	b.n	8001c26 <HAL_TIM_PWM_Start+0x6a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07c      	b.n	8001d28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <HAL_TIM_PWM_Start+0x82>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	e013      	b.n	8001c66 <HAL_TIM_PWM_Start+0xaa>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d104      	bne.n	8001c4e <HAL_TIM_PWM_Start+0x92>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c4c:	e00b      	b.n	8001c66 <HAL_TIM_PWM_Start+0xaa>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d104      	bne.n	8001c5e <HAL_TIM_PWM_Start+0xa2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c5c:	e003      	b.n	8001c66 <HAL_TIM_PWM_Start+0xaa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fcb8 	bl	80025e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_TIM_PWM_Start+0x174>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_TIM_PWM_Start+0xcc>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a2c      	ldr	r2, [pc, #176]	; (8001d34 <HAL_TIM_PWM_Start+0x178>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_TIM_PWM_Start+0xd0>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_TIM_PWM_Start+0xd2>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_TIM_PWM_Start+0x174>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb4:	d01d      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_TIM_PWM_Start+0x17c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d018      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_TIM_PWM_Start+0x180>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <HAL_TIM_PWM_Start+0x184>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_TIM_PWM_Start+0x178>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d009      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_TIM_PWM_Start+0x188>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d004      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x136>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_TIM_PWM_Start+0x18c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d111      	bne.n	8001d16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d010      	beq.n	8001d26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d14:	e007      	b.n	8001d26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40001800 	.word	0x40001800

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0202 	mvn.w	r2, #2
 8001d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9ba 	bl	8002108 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f9ac 	bl	80020f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9bd 	bl	800211c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f990 	bl	8002108 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f982 	bl	80020f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f993 	bl	800211c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f966 	bl	8002108 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f958 	bl	80020f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f969 	bl	800211c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0210 	mvn.w	r2, #16
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f93c 	bl	8002108 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f92e 	bl	80020f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f93f 	bl	800211c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0201 	mvn.w	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f908 	bl	80020e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fba3 	bl	8002642 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f904 	bl	8002130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fb6d 	bl	800262e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0ae      	b.n	80020d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	f200 809f 	bhi.w	80020c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fc5 	.word	0x08001fc5
 8001f94:	080020c9 	.word	0x080020c9
 8001f98:	080020c9 	.word	0x080020c9
 8001f9c:	080020c9 	.word	0x080020c9
 8001fa0:	08002005 	.word	0x08002005
 8001fa4:	080020c9 	.word	0x080020c9
 8001fa8:	080020c9 	.word	0x080020c9
 8001fac:	080020c9 	.word	0x080020c9
 8001fb0:	08002047 	.word	0x08002047
 8001fb4:	080020c9 	.word	0x080020c9
 8001fb8:	080020c9 	.word	0x080020c9
 8001fbc:	080020c9 	.word	0x080020c9
 8001fc0:	08002087 	.word	0x08002087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f95a 	bl	8002284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6999      	ldr	r1, [r3, #24]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	619a      	str	r2, [r3, #24]
      break;
 8002002:	e064      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9aa 	bl	8002364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	619a      	str	r2, [r3, #24]
      break;
 8002044:	e043      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f9ff 	bl	8002450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0208 	orr.w	r2, r2, #8
 8002060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0204 	bic.w	r2, r2, #4
 8002070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69d9      	ldr	r1, [r3, #28]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
      break;
 8002084:	e023      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa53 	bl	8002538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69d9      	ldr	r1, [r3, #28]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	021a      	lsls	r2, r3, #8
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	61da      	str	r2, [r3, #28]
      break;
 80020c6:	e002      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	75fb      	strb	r3, [r7, #23]
      break;
 80020cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a40      	ldr	r2, [pc, #256]	; (8002258 <TIM_Base_SetConfig+0x114>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002162:	d00f      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3d      	ldr	r2, [pc, #244]	; (800225c <TIM_Base_SetConfig+0x118>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00b      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3c      	ldr	r2, [pc, #240]	; (8002260 <TIM_Base_SetConfig+0x11c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <TIM_Base_SetConfig+0x120>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <TIM_Base_SetConfig+0x124>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2f      	ldr	r2, [pc, #188]	; (8002258 <TIM_Base_SetConfig+0x114>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d027      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2c      	ldr	r2, [pc, #176]	; (800225c <TIM_Base_SetConfig+0x118>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d023      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <TIM_Base_SetConfig+0x11c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <TIM_Base_SetConfig+0x120>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01b      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a29      	ldr	r2, [pc, #164]	; (8002268 <TIM_Base_SetConfig+0x124>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d017      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <TIM_Base_SetConfig+0x128>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <TIM_Base_SetConfig+0x12c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00f      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <TIM_Base_SetConfig+0x130>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a25      	ldr	r2, [pc, #148]	; (8002278 <TIM_Base_SetConfig+0x134>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <TIM_Base_SetConfig+0x138>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <TIM_Base_SetConfig+0x13c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <TIM_Base_SetConfig+0x114>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0xf8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <TIM_Base_SetConfig+0x124>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40010400 	.word	0x40010400
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800
 8002278:	40001800 	.word	0x40001800
 800227c:	40001c00 	.word	0x40001c00
 8002280:	40002000 	.word	0x40002000

08002284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0201 	bic.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a20      	ldr	r2, [pc, #128]	; (800235c <TIM_OC1_SetConfig+0xd8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_OC1_SetConfig+0x64>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <TIM_OC1_SetConfig+0xdc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10c      	bne.n	8002302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 0308 	bic.w	r3, r3, #8
 80022ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <TIM_OC1_SetConfig+0xd8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_OC1_SetConfig+0x8e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <TIM_OC1_SetConfig+0xdc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d111      	bne.n	8002336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	621a      	str	r2, [r3, #32]
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40010000 	.word	0x40010000
 8002360:	40010400 	.word	0x40010400

08002364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f023 0210 	bic.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f023 0320 	bic.w	r3, r3, #32
 80023ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <TIM_OC2_SetConfig+0xe4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_OC2_SetConfig+0x68>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <TIM_OC2_SetConfig+0xe8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d10d      	bne.n	80023e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <TIM_OC2_SetConfig+0xe4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d003      	beq.n	80023f8 <TIM_OC2_SetConfig+0x94>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <TIM_OC2_SetConfig+0xe8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d113      	bne.n	8002420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	621a      	str	r2, [r3, #32]
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40010400 	.word	0x40010400

08002450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <TIM_OC3_SetConfig+0xe0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_OC3_SetConfig+0x66>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <TIM_OC3_SetConfig+0xe4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10d      	bne.n	80024d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a16      	ldr	r2, [pc, #88]	; (8002530 <TIM_OC3_SetConfig+0xe0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_OC3_SetConfig+0x92>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a15      	ldr	r2, [pc, #84]	; (8002534 <TIM_OC3_SetConfig+0xe4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40010000 	.word	0x40010000
 8002534:	40010400 	.word	0x40010400

08002538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	031b      	lsls	r3, r3, #12
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <TIM_OC4_SetConfig+0xa4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_OC4_SetConfig+0x68>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <TIM_OC4_SetConfig+0xa8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d109      	bne.n	80025b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000
 80025e0:	40010400 	.word	0x40010400

080025e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2201      	movs	r2, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a1a      	ldr	r2, [r3, #32]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	621a      	str	r2, [r3, #32]
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e03f      	b.n	80026e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d106      	bne.n	8002682 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fe f8ef 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2224      	movs	r2, #36	; 0x24
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002698:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f828 	bl	80026f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b0c0      	sub	sp, #256	; 0x100
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	ea40 0301 	orr.w	r3, r0, r1
 8002718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	431a      	orrs	r2, r3
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002748:	f021 010c 	bic.w	r1, r1, #12
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002756:	430b      	orrs	r3, r1
 8002758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800275a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	6999      	ldr	r1, [r3, #24]
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	ea40 0301 	orr.w	r3, r0, r1
 8002776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <UART_SetConfig+0x2cc>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d005      	beq.n	8002790 <UART_SetConfig+0xa0>
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <UART_SetConfig+0x2d0>)
 800278c:	429a      	cmp	r2, r3
 800278e:	d104      	bne.n	800279a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002790:	f7fe fd68 	bl	8001264 <HAL_RCC_GetPCLK2Freq>
 8002794:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002798:	e003      	b.n	80027a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800279a:	f7fe fd4f 	bl	800123c <HAL_RCC_GetPCLK1Freq>
 800279e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ac:	f040 810c 	bne.w	80029c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027c2:	4622      	mov	r2, r4
 80027c4:	462b      	mov	r3, r5
 80027c6:	1891      	adds	r1, r2, r2
 80027c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80027ca:	415b      	adcs	r3, r3
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027d2:	4621      	mov	r1, r4
 80027d4:	eb12 0801 	adds.w	r8, r2, r1
 80027d8:	4629      	mov	r1, r5
 80027da:	eb43 0901 	adc.w	r9, r3, r1
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f2:	4690      	mov	r8, r2
 80027f4:	4699      	mov	r9, r3
 80027f6:	4623      	mov	r3, r4
 80027f8:	eb18 0303 	adds.w	r3, r8, r3
 80027fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002800:	462b      	mov	r3, r5
 8002802:	eb49 0303 	adc.w	r3, r9, r3
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002816:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800281a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800281e:	460b      	mov	r3, r1
 8002820:	18db      	adds	r3, r3, r3
 8002822:	653b      	str	r3, [r7, #80]	; 0x50
 8002824:	4613      	mov	r3, r2
 8002826:	eb42 0303 	adc.w	r3, r2, r3
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
 800282c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002834:	f7fd fce6 	bl	8000204 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <UART_SetConfig+0x2d4>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	011c      	lsls	r4, r3, #4
 8002846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002850:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002858:	4642      	mov	r2, r8
 800285a:	464b      	mov	r3, r9
 800285c:	1891      	adds	r1, r2, r2
 800285e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002860:	415b      	adcs	r3, r3
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002868:	4641      	mov	r1, r8
 800286a:	eb12 0a01 	adds.w	sl, r2, r1
 800286e:	4649      	mov	r1, r9
 8002870:	eb43 0b01 	adc.w	fp, r3, r1
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002888:	4692      	mov	sl, r2
 800288a:	469b      	mov	fp, r3
 800288c:	4643      	mov	r3, r8
 800288e:	eb1a 0303 	adds.w	r3, sl, r3
 8002892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002896:	464b      	mov	r3, r9
 8002898:	eb4b 0303 	adc.w	r3, fp, r3
 800289c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028b4:	460b      	mov	r3, r1
 80028b6:	18db      	adds	r3, r3, r3
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
 80028ba:	4613      	mov	r3, r2
 80028bc:	eb42 0303 	adc.w	r3, r2, r3
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
 80028c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028ca:	f7fd fc9b 	bl	8000204 <__aeabi_uldivmod>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <UART_SetConfig+0x2d4>)
 80028d6:	fba3 2301 	umull	r2, r3, r3, r1
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2264      	movs	r2, #100	; 0x64
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	1acb      	subs	r3, r1, r3
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028ea:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <UART_SetConfig+0x2d4>)
 80028ec:	fba3 2302 	umull	r2, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028f8:	441c      	add	r4, r3
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002904:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	63b9      	str	r1, [r7, #56]	; 0x38
 8002914:	415b      	adcs	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6339      	str	r1, [r7, #48]	; 0x30
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002968:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800296c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002970:	460b      	mov	r3, r1
 8002972:	18db      	adds	r3, r3, r3
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
 8002976:	4613      	mov	r3, r2
 8002978:	eb42 0303 	adc.w	r3, r2, r3
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002986:	f7fd fc3d 	bl	8000204 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <UART_SetConfig+0x2d4>)
 8002990:	fba3 1302 	umull	r1, r3, r3, r2
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	2164      	movs	r1, #100	; 0x64
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	3332      	adds	r3, #50	; 0x32
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <UART_SetConfig+0x2d4>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	f003 0207 	and.w	r2, r3, #7
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4422      	add	r2, r4
 80029b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b8:	e105      	b.n	8002bc6 <UART_SetConfig+0x4d6>
 80029ba:	bf00      	nop
 80029bc:	40011000 	.word	0x40011000
 80029c0:	40011400 	.word	0x40011400
 80029c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029da:	4642      	mov	r2, r8
 80029dc:	464b      	mov	r3, r9
 80029de:	1891      	adds	r1, r2, r2
 80029e0:	6239      	str	r1, [r7, #32]
 80029e2:	415b      	adcs	r3, r3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029ea:	4641      	mov	r1, r8
 80029ec:	1854      	adds	r4, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb43 0501 	adc.w	r5, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	00eb      	lsls	r3, r5, #3
 80029fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a02:	00e2      	lsls	r2, r4, #3
 8002a04:	4614      	mov	r4, r2
 8002a06:	461d      	mov	r5, r3
 8002a08:	4643      	mov	r3, r8
 8002a0a:	18e3      	adds	r3, r4, r3
 8002a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a10:	464b      	mov	r3, r9
 8002a12:	eb45 0303 	adc.w	r3, r5, r3
 8002a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a36:	4629      	mov	r1, r5
 8002a38:	008b      	lsls	r3, r1, #2
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a40:	4621      	mov	r1, r4
 8002a42:	008a      	lsls	r2, r1, #2
 8002a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a48:	f7fd fbdc 	bl	8000204 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <UART_SetConfig+0x4e4>)
 8002a52:	fba3 2302 	umull	r2, r3, r3, r2
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	011c      	lsls	r4, r3, #4
 8002a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a6c:	4642      	mov	r2, r8
 8002a6e:	464b      	mov	r3, r9
 8002a70:	1891      	adds	r1, r2, r2
 8002a72:	61b9      	str	r1, [r7, #24]
 8002a74:	415b      	adcs	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	1851      	adds	r1, r2, r1
 8002a80:	6139      	str	r1, [r7, #16]
 8002a82:	4649      	mov	r1, r9
 8002a84:	414b      	adcs	r3, r1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a94:	4659      	mov	r1, fp
 8002a96:	00cb      	lsls	r3, r1, #3
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	00ca      	lsls	r2, r1, #3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	008b      	lsls	r3, r1, #2
 8002ad8:	4641      	mov	r1, r8
 8002ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ade:	4641      	mov	r1, r8
 8002ae0:	008a      	lsls	r2, r1, #2
 8002ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ae6:	f7fd fb8d 	bl	8000204 <__aeabi_uldivmod>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <UART_SetConfig+0x4e4>)
 8002af0:	fba3 1302 	umull	r1, r3, r3, r2
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	2164      	movs	r1, #100	; 0x64
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	3332      	adds	r3, #50	; 0x32
 8002b02:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <UART_SetConfig+0x4e4>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b0e:	441c      	add	r4, r3
 8002b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b14:	2200      	movs	r2, #0
 8002b16:	673b      	str	r3, [r7, #112]	; 0x70
 8002b18:	677a      	str	r2, [r7, #116]	; 0x74
 8002b1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b1e:	4642      	mov	r2, r8
 8002b20:	464b      	mov	r3, r9
 8002b22:	1891      	adds	r1, r2, r2
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	415b      	adcs	r3, r3
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b2e:	4641      	mov	r1, r8
 8002b30:	1851      	adds	r1, r2, r1
 8002b32:	6039      	str	r1, [r7, #0]
 8002b34:	4649      	mov	r1, r9
 8002b36:	414b      	adcs	r3, r1
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b46:	4659      	mov	r1, fp
 8002b48:	00cb      	lsls	r3, r1, #3
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b50:	4651      	mov	r1, sl
 8002b52:	00ca      	lsls	r2, r1, #3
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	189b      	adds	r3, r3, r2
 8002b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b60:	464b      	mov	r3, r9
 8002b62:	460a      	mov	r2, r1
 8002b64:	eb42 0303 	adc.w	r3, r2, r3
 8002b68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	663b      	str	r3, [r7, #96]	; 0x60
 8002b74:	667a      	str	r2, [r7, #100]	; 0x64
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b82:	4649      	mov	r1, r9
 8002b84:	008b      	lsls	r3, r1, #2
 8002b86:	4641      	mov	r1, r8
 8002b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	008a      	lsls	r2, r1, #2
 8002b90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b94:	f7fd fb36 	bl	8000204 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <UART_SetConfig+0x4e4>)
 8002b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2164      	movs	r1, #100	; 0x64
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <UART_SetConfig+0x4e4>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4422      	add	r2, r4
 8002bc4:	609a      	str	r2, [r3, #8]
}
 8002bc6:	bf00      	nop
 8002bc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd2:	bf00      	nop
 8002bd4:	51eb851f 	.word	0x51eb851f

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4d0d      	ldr	r5, [pc, #52]	; (8002c10 <__libc_init_array+0x38>)
 8002bdc:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002bde:	1b64      	subs	r4, r4, r5
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	2600      	movs	r6, #0
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	4d0b      	ldr	r5, [pc, #44]	; (8002c18 <__libc_init_array+0x40>)
 8002bea:	4c0c      	ldr	r4, [pc, #48]	; (8002c1c <__libc_init_array+0x44>)
 8002bec:	f000 f820 	bl	8002c30 <_init>
 8002bf0:	1b64      	subs	r4, r4, r5
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002c68 	.word	0x08002c68
 8002c14:	08002c68 	.word	0x08002c68
 8002c18:	08002c68 	.word	0x08002c68
 8002c1c:	08002c6c 	.word	0x08002c6c

08002c20 <memset>:
 8002c20:	4402      	add	r2, r0
 8002c22:	4603      	mov	r3, r0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
